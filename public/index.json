[{"content":"Let\u0026rsquo;s look at this math problem from the recent AIsing Programming Contest 2020 on AtCoder.\nThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\nTo begin, it\u0026rsquo;s a good idea to cast the differences in the target expression as separate variables. Let\u0026rsquo;s rename $a_1$ as $a$ and $a_2$ as $a + a\u0026rsquo;$, so that $a\u0026rsquo; = a_2 - a_1$. It\u0026rsquo;s also a good idea to add a dummy $f \\ge 0$ to $(2)$ to the left side so that it becomes an equation. Under this renaming, things become slightly simpler. We\u0026rsquo;re now asked to evaluate the sum of \\[\\tag{1*} a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d\u0026rsquo; e\u0026rsquo;\\]for all tuples such that\\[\\tag{2*} 2(a + b + \\cdots + e) + (a\u0026rsquo; + b\u0026rsquo; + \\cdots + e\u0026rsquo;) + f = N \\]where\\[\\tag{3*} \\begin{cases}a, b, \\cdots, e, f \\ge 0 \\\\ a\u0026rsquo;, b\u0026rsquo;, c\u0026rsquo;, d\u0026rsquo;, e\u0026rsquo; \u0026gt; 0\\end{cases}\\]While the target expression $(1*)$ is simpler, we need to find out what to do about $(2*)$. Another greatly used tool in combinatorics is casting these problems in terms of generating functions and obtaining the solution by manipulating the power series.\nA few words on generating functions Consider multiplying two polynomials $f$ and $g$. Question: what exactly does the coefficient of $x^i$ denote? Described purely in words, it is the sum of product of coefficients in any two terms, one from $f$, and one from $g$, so that the sum of degrees of the terms is $i$. We can look at this for more than two polynomials: we pick one term each from every participating polynomial in the product, we find the sum of the degrees, and add the product of these coefficients to that term. We may think of the coefficients, then, as a form of weight for a term.\nThe technique we\u0026rsquo;re about to employ takes advantage of precisely this. We multiply many series, where each individual series corresponds to a variable. The exponents denote possible values for the variable, and a coefficient intuitively describes the weight in that term. Then the coefficients of the product are the sum of products of these weights.\nSolution We need to derive a generating function from $(2*)$. We\u0026rsquo;re adding up to $N$ using $11$ non-negative integers, where the first five of them are even (this is because of the coefficient $2$), and the next five of them are strictly positive. We also need to weigh the series that correspond to $a\u0026rsquo;, b\u0026rsquo;, \\cdots, e\u0026rsquo;$ so that we get the sum of $a\u0026rsquo;b\u0026rsquo;c\u0026rsquo;d\u0026rsquo;e\u0026rsquo;$ in the resulting product. This can be done by making the coefficient equal to the exponent (so that if $x^i$ is picked, it contributes $i$ to the product). So we obtain the following representation:\\[F(x) = (1 + x^2 + x^4 + \\cdots)^5 (1x + 2x^2 + 3x^3 + \\cdots )^5 (1 + x + x^2 + \\cdots)\\]and we need to find the coefficient of $x^N$ in $F(x)$ to obtain the answer. The first boss move in moving to the solution is noticing\\[x + 2x^2 + 3x^3 + \\cdots = x(1 + x + x^2 + \\cdots)^2\\]so that\\[F(x) = x^5 (1 + x^2 + x^4 + \\cdots)^5(1 + x + x^2 + \\cdots)^{11}\\]We should also remove the stupid $x^5$ because it\u0026rsquo;s of no use to us, and we can calculate the coefficient of $x^{N-5}$ in\\[F_2(x) = (1 + x^2 + x^4 + \\cdots)^5(1+x+x^2 + \\cdots)^{11}\\]We\u0026rsquo;ve hit the crux of the problem: what do we do with this? Life would have been much simpler if we had only a single type of exponentiated. Why? Because we have a closed form\\[\\tag{*} (1 + x + x^2 + \\cdots)^n = \\sum_{k = 0}^{\\infty} \\binom{n + k - 1}{k - 1} x^k\\]This is stars-and-bars in terms of generating functions.\nWithout further ado, here\u0026rsquo;s the big trick:\\[1 + x + x^2 + \\cdots = (1 + x)(1 + x^2 + x^4 + \\cdots)\\]And so\\[F_2(x) = (1+x)^{11} (1+x^2+x^4+\\cdots)^{16}\\]The first part $(1 + x)^{11}$ can be expanded using the binomial theorem, and the second part can be expanded using $(*)$. To evaluate the coefficient of $x^{N-5}$, we loop on the term from the binomial expansion, (say, the $x^i$ term) and multiply its coefficient by the coefficient of $x^{N-5-i}$ in the in the expansion of $(1 + x^2 + x^4 + \\cdots)^{16}$. And we\u0026rsquo;re done!\nA tiny implementation detail: To compute a binomial coefficient $\\binom{p}{q}$ with large $p$ and small $q$, it\u0026rsquo;s better to use the following:\\[\\binom{p}{q} = \\frac{p(p-1)\\cdots(p-q+1)}{q!}\\]Most problems involve precomputing factorials and their inverses, but this is not one of them.\n","permalink":"http://localhost:1313/posts/2020-08-03-generating-functions/","summary":"\u003cp\u003eLet\u0026rsquo;s look at this math problem from the recent \u003ca href=\"https://atcoder.jp/contests/aising2020/tasks/aising2020_f\"\u003eAIsing Programming Contest 2020 on AtCoder.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\u003c/p\u003e","title":"Generating Functions"},{"content":"Let\u0026rsquo;s look at this math problem from the recent AIsing Programming Contest 2020 on AtCoder.\nThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\nTo begin, it\u0026rsquo;s a good idea to cast the differences in the target expression as separate variables. Let\u0026rsquo;s rename $a_1$ as $a$ and $a_2$ as $a + a\u0026rsquo;$, so that $a\u0026rsquo; = a_2 - a_1$. It\u0026rsquo;s also a good idea to add a dummy $f \\ge 0$ to $(2)$ to the left side so that it becomes an equation. Under this renaming, things become slightly simpler. We\u0026rsquo;re now asked to evaluate the sum of \\[\\tag{1*} a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d\u0026rsquo; e\u0026rsquo;\\]for all tuples such that\\[\\tag{2*} 2(a + b + \\cdots + e) + (a\u0026rsquo; + b\u0026rsquo; + \\cdots + e\u0026rsquo;) + f = N \\]where\\[\\tag{3*} \\begin{cases}a, b, \\cdots, e, f \\ge 0 \\\\ a\u0026rsquo;, b\u0026rsquo;, c\u0026rsquo;, d\u0026rsquo;, e\u0026rsquo; \u0026gt; 0\\end{cases}\\]While the target expression $(1*)$ is simpler, we need to find out what to do about $(2*)$. Another greatly used tool in combinatorics is casting these problems in terms of generating functions and obtaining the solution by manipulating the power series.\nA few words on generating functions Consider multiplying two polynomials $f$ and $g$. Question: what exactly does the coefficient of $x^i$ denote? Described purely in words, it is the sum of product of coefficients in any two terms, one from $f$, and one from $g$, so that the sum of degrees of the terms is $i$. We can look at this for more than two polynomials: we pick one term each from every participating polynomial in the product, we find the sum of the degrees, and add the product of these coefficients to that term. We may think of the coefficients, then, as a form of weight for a term.\nThe technique we\u0026rsquo;re about to employ takes advantage of precisely this. We multiply many series, where each individual series corresponds to a variable. The exponents denote possible values for the variable, and a coefficient intuitively describes the weight in that term. Then the coefficients of the product are the sum of products of these weights.\nSolution We need to derive a generating function from $(2*)$. We\u0026rsquo;re adding up to $N$ using $11$ non-negative integers, where the first five of them are even (this is because of the coefficient $2$), and the next five of them are strictly positive. We also need to weigh the series that correspond to $a\u0026rsquo;, b\u0026rsquo;, \\cdots, e\u0026rsquo;$ so that we get the sum of $a\u0026rsquo;b\u0026rsquo;c\u0026rsquo;d\u0026rsquo;e\u0026rsquo;$ in the resulting product. This can be done by making the coefficient equal to the exponent (so that if $x^i$ is picked, it contributes $i$ to the product). So we obtain the following representation:\\[F(x) = (1 + x^2 + x^4 + \\cdots)^5 (1x + 2x^2 + 3x^3 + \\cdots )^5 (1 + x + x^2 + \\cdots)\\]and we need to find the coefficient of $x^N$ in $F(x)$ to obtain the answer. The first boss move in moving to the solution is noticing\\[x + 2x^2 + 3x^3 + \\cdots = x(1 + x + x^2 + \\cdots)^2\\]so that\\[F(x) = x^5 (1 + x^2 + x^4 + \\cdots)^5(1 + x + x^2 + \\cdots)^{11}\\]We should also remove the stupid $x^5$ because it\u0026rsquo;s of no use to us, and we can calculate the coefficient of $x^{N-5}$ in\\[F_2(x) = (1 + x^2 + x^4 + \\cdots)^5(1+x+x^2 + \\cdots)^{11}\\]We\u0026rsquo;ve hit the crux of the problem: what do we do with this? Life would have been much simpler if we had only a single type of exponentiated. Why? Because we have a closed form\\[\\tag{*} (1 + x + x^2 + \\cdots)^n = \\sum_{k = 0}^{\\infty} \\binom{n + k - 1}{k - 1} x^k\\]This is stars-and-bars in terms of generating functions.\nWithout further ado, here\u0026rsquo;s the big trick:\\[1 + x + x^2 + \\cdots = (1 + x)(1 + x^2 + x^4 + \\cdots)\\]And so\\[F_2(x) = (1+x)^{11} (1+x^2+x^4+\\cdots)^{16}\\]The first part $(1 + x)^{11}$ can be expanded using the binomial theorem, and the second part can be expanded using $(*)$. To evaluate the coefficient of $x^{N-5}$, we loop on the term from the binomial expansion, (say, the $x^i$ term) and multiply its coefficient by the coefficient of $x^{N-5-i}$ in the in the expansion of $(1 + x^2 + x^4 + \\cdots)^{16}$. And we\u0026rsquo;re done!\nA tiny implementation detail: To compute a binomial coefficient $\\binom{p}{q}$ with large $p$ and small $q$, it\u0026rsquo;s better to use the following:\\[\\binom{p}{q} = \\frac{p(p-1)\\cdots(p-q+1)}{q!}\\]Most problems involve precomputing factorials and their inverses, but this is not one of them.\n","permalink":"http://localhost:1313/posts/2020-08-03-generating-functions/","summary":"\u003cp\u003eLet\u0026rsquo;s look at this math problem from the recent \u003ca href=\"https://atcoder.jp/contests/aising2020/tasks/aising2020_f\"\u003eAIsing Programming Contest 2020 on AtCoder.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\u003c/p\u003e","title":"Generating Functions"},{"content":"Today I\u0026rsquo;ll discuss a probability problem from CodeChef.\nThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\nIf you are familiar with statistical distributions, you should immediately see the goal of this problem. Don\u0026rsquo;t worry if you are not - you should be able to follow.\nThe case $N = 1$ The only two choices for $X$ are $0$ and $1$ and the process terminates as soon as we get a $1$. This is visualised as tossing a coin and waiting until the first heads. The number of steps follows a geometric distribution with $p = \\frac{1}{2}$ (again, fret not if you don\u0026rsquo;t know what that means). It is worth mentioning how to calculate the expected value even though it is covered in the samples. Let $e$ denote the expected number of tosses until we meet our first $1$. On our first step, we either obtain a $1$ with probability $\\frac{1}{2}$ or we have to \u0026ldquo;reset\u0026rdquo; the process with probability $\\frac{1}{2}$. Thus, the equation is $e = \\frac{1}{2} \\cdot 1 + \\frac{1}{2} \\cdot (1 + e)$ which yields $e = 2$.\nUnderstanding the general case The general case is visualised as follows: do the above experiment with $N$ separate coins. What is the expected value of the maximum number of trials among them? Formally, we have $N$ iid random variables $X_1, \\cdots, X_N$ all following the geometric distribution with $p = \\frac{1}{2}$. What is the value of $E[Y]$ where $Y = \\max X_i$?\nWe know by the definition of expected value that $E[Y] = \\sum_{i \\ge 1} i\\cdot P(Y = i)$. But this can also be seen as $E[Y] = \\sum_{i \\ge 1} P(Y \\ge i)$. Why? Try writing $P(Y \\ge i)$ as $P(Y = i) + P(Y = i + 1) + \\cdots$ and check that this becomes the original definition. And so, since the $N$ variables are independent,\n$$E[Y] = \\sum_{i \\ge 1} 1 - P(Y \u0026lt; i) = \\sum_{i \\ge 1} 1 - P(X_1 \u0026lt; i) \\cdots P(X_N \u0026lt; i)$$\nThe probability $P(X_1 \u0026lt; i)$ is $1 - P(X_1 \\ge i)$. Note that $P(X_1 \\ge i)$ means that you want the first $i - 1$ tosses to appear as tails the probability of which is $\\frac{1}{2^{i - 1}}$. The same goes for $X_2$ through $X_N$ as they are identically distributed. Thus,\n$$E[Y] = \\sum_{i \\ge 1} 1 - \\left(1 - \\frac{1}{2^{i-1}}\\right)^{N}$$\nAs a sanity check, try substituting $N = 1$ and see that it matches the expected value (pun not intended).\nFor brevity, we change the indexing to 0-based and denote $p = \\frac{1}{2}$. We need to calculate $\\sum_{i\\ge 0} 1 - (1 - p^i)^N$ where $N$ is fixed.\nFinishing it off Using binomial theorem, the series is\n$$S = \\sum_{i \\ge 0}\\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} p^{ij}$$\nHere is the kicker: switch indexing.\n$$S = \\sum_{j = 1}^{N} \\sum_{i \\ge 0} \\binom{N}{j} (-1)^{N - j} p^{ij} = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\sum_{i \\ge 0} p^{ij}$$\nOf course, we know that the inner summation is merely the geometric series and so we can finish with the result (where $p$ still denotes $\\frac{1}{2}$).\n$$S = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\frac{1}{1 - p^j}$$\nThe problem is thus solved in complexity $O(N \\log(10^9 + 7))$.\nThe computation of binomial coefficients modulo a large prime is a fairly common idea in competitive programming: compute in advance the arrays $\\rm factorial[0..N]$ and $\\rm inverse\\_factorial[0..N]$ where computations are carried out modulo the prime $10^9 + 7$, that is, $\\rm inverse\\_factorial[i] \\cdot factorial[i] \\equiv 1 \\pmod {10^9 + 7}$. Computing inverses/reciprocals is done using Fermat\u0026rsquo;s theorem.\n","permalink":"http://localhost:1313/posts/2022-02-05-random-or/","summary":"\u003cp\u003eToday I\u0026rsquo;ll discuss a \u003ca href=\"https://www.codechef.com/FEB221A/problems/RANDOMOR\"\u003eprobability problem from CodeChef\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\u003c/p\u003e","title":"Random OR"},{"content":"Let\u0026rsquo;s look at this math problem from the recent AIsing Programming Contest 2020 on AtCoder.\nThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\nTo begin, it\u0026rsquo;s a good idea to cast the differences in the target expression as separate variables. Let\u0026rsquo;s rename $a_1$ as $a$ and $a_2$ as $a + a\u0026rsquo;$, so that $a\u0026rsquo; = a_2 - a_1$. It\u0026rsquo;s also a good idea to add a dummy $f \\ge 0$ to $(2)$ to the left side so that it becomes an equation. Under this renaming, things become slightly simpler. We\u0026rsquo;re now asked to evaluate the sum of \\[\\tag{1*} a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d\u0026rsquo; e\u0026rsquo;\\]for all tuples such that\\[\\tag{2*} 2(a + b + \\cdots + e) + (a\u0026rsquo; + b\u0026rsquo; + \\cdots + e\u0026rsquo;) + f = N \\]where\\[\\tag{3*} \\begin{cases}a, b, \\cdots, e, f \\ge 0 \\\\ a\u0026rsquo;, b\u0026rsquo;, c\u0026rsquo;, d\u0026rsquo;, e\u0026rsquo; \u0026gt; 0\\end{cases}\\]While the target expression $(1*)$ is simpler, we need to find out what to do about $(2*)$. Another greatly used tool in combinatorics is casting these problems in terms of generating functions and obtaining the solution by manipulating the power series.\nA few words on generating functions Consider multiplying two polynomials $f$ and $g$. Question: what exactly does the coefficient of $x^i$ denote? Described purely in words, it is the sum of product of coefficients in any two terms, one from $f$, and one from $g$, so that the sum of degrees of the terms is $i$. We can look at this for more than two polynomials: we pick one term each from every participating polynomial in the product, we find the sum of the degrees, and add the product of these coefficients to that term. We may think of the coefficients, then, as a form of weight for a term.\nThe technique we\u0026rsquo;re about to employ takes advantage of precisely this. We multiply many series, where each individual series corresponds to a variable. The exponents denote possible values for the variable, and a coefficient intuitively describes the weight in that term. Then the coefficients of the product are the sum of products of these weights.\nSolution We need to derive a generating function from $(2*)$. We\u0026rsquo;re adding up to $N$ using $11$ non-negative integers, where the first five of them are even (this is because of the coefficient $2$), and the next five of them are strictly positive. We also need to weigh the series that correspond to $a\u0026rsquo;, b\u0026rsquo;, \\cdots, e\u0026rsquo;$ so that we get the sum of $a\u0026rsquo;b\u0026rsquo;c\u0026rsquo;d\u0026rsquo;e\u0026rsquo;$ in the resulting product. This can be done by making the coefficient equal to the exponent (so that if $x^i$ is picked, it contributes $i$ to the product). So we obtain the following representation:\\[F(x) = (1 + x^2 + x^4 + \\cdots)^5 (1x + 2x^2 + 3x^3 + \\cdots )^5 (1 + x + x^2 + \\cdots)\\]and we need to find the coefficient of $x^N$ in $F(x)$ to obtain the answer. The first boss move in moving to the solution is noticing\\[x + 2x^2 + 3x^3 + \\cdots = x(1 + x + x^2 + \\cdots)^2\\]so that\\[F(x) = x^5 (1 + x^2 + x^4 + \\cdots)^5(1 + x + x^2 + \\cdots)^{11}\\]We should also remove the stupid $x^5$ because it\u0026rsquo;s of no use to us, and we can calculate the coefficient of $x^{N-5}$ in\\[F_2(x) = (1 + x^2 + x^4 + \\cdots)^5(1+x+x^2 + \\cdots)^{11}\\]We\u0026rsquo;ve hit the crux of the problem: what do we do with this? Life would have been much simpler if we had only a single type of exponentiated. Why? Because we have a closed form\\[\\tag{*} (1 + x + x^2 + \\cdots)^n = \\sum_{k = 0}^{\\infty} \\binom{n + k - 1}{k - 1} x^k\\]This is stars-and-bars in terms of generating functions.\nWithout further ado, here\u0026rsquo;s the big trick:\\[1 + x + x^2 + \\cdots = (1 + x)(1 + x^2 + x^4 + \\cdots)\\]And so\\[F_2(x) = (1+x)^{11} (1+x^2+x^4+\\cdots)^{16}\\]The first part $(1 + x)^{11}$ can be expanded using the binomial theorem, and the second part can be expanded using $(*)$. To evaluate the coefficient of $x^{N-5}$, we loop on the term from the binomial expansion, (say, the $x^i$ term) and multiply its coefficient by the coefficient of $x^{N-5-i}$ in the in the expansion of $(1 + x^2 + x^4 + \\cdots)^{16}$. And we\u0026rsquo;re done!\nA tiny implementation detail: To compute a binomial coefficient $\\binom{p}{q}$ with large $p$ and small $q$, it\u0026rsquo;s better to use the following:\\[\\binom{p}{q} = \\frac{p(p-1)\\cdots(p-q+1)}{q!}\\]Most problems involve precomputing factorials and their inverses, but this is not one of them.\n","permalink":"http://localhost:1313/posts/2020-08-03-generating-functions/","summary":"\u003cp\u003eLet\u0026rsquo;s look at this math problem from the recent \u003ca href=\"https://atcoder.jp/contests/aising2020/tasks/aising2020_f\"\u003eAIsing Programming Contest 2020 on AtCoder.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\u003c/p\u003e","title":"Generating Functions"},{"content":"Today I\u0026rsquo;ll discuss a probability problem from CodeChef.\nThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\nIf you are familiar with statistical distributions, you should immediately see the goal of this problem. Don\u0026rsquo;t worry if you are not - you should be able to follow.\nThe case $N = 1$ The only two choices for $X$ are $0$ and $1$ and the process terminates as soon as we get a $1$. This is visualised as tossing a coin and waiting until the first heads. The number of steps follows a geometric distribution with $p = \\frac{1}{2}$ (again, fret not if you don\u0026rsquo;t know what that means). It is worth mentioning how to calculate the expected value even though it is covered in the samples. Let $e$ denote the expected number of tosses until we meet our first $1$. On our first step, we either obtain a $1$ with probability $\\frac{1}{2}$ or we have to \u0026ldquo;reset\u0026rdquo; the process with probability $\\frac{1}{2}$. Thus, the equation is $e = \\frac{1}{2} \\cdot 1 + \\frac{1}{2} \\cdot (1 + e)$ which yields $e = 2$.\nUnderstanding the general case The general case is visualised as follows: do the above experiment with $N$ separate coins. What is the expected value of the maximum number of trials among them? Formally, we have $N$ iid random variables $X_1, \\cdots, X_N$ all following the geometric distribution with $p = \\frac{1}{2}$. What is the value of $E[Y]$ where $Y = \\max X_i$?\nWe know by the definition of expected value that $E[Y] = \\sum_{i \\ge 1} i\\cdot P(Y = i)$. But this can also be seen as $E[Y] = \\sum_{i \\ge 1} P(Y \\ge i)$. Why? Try writing $P(Y \\ge i)$ as $P(Y = i) + P(Y = i + 1) + \\cdots$ and check that this becomes the original definition. And so, since the $N$ variables are independent,\n$$E[Y] = \\sum_{i \\ge 1} 1 - P(Y \u0026lt; i) = \\sum_{i \\ge 1} 1 - P(X_1 \u0026lt; i) \\cdots P(X_N \u0026lt; i)$$\nThe probability $P(X_1 \u0026lt; i)$ is $1 - P(X_1 \\ge i)$. Note that $P(X_1 \\ge i)$ means that you want the first $i - 1$ tosses to appear as tails the probability of which is $\\frac{1}{2^{i - 1}}$. The same goes for $X_2$ through $X_N$ as they are identically distributed. Thus,\n$$E[Y] = \\sum_{i \\ge 1} 1 - \\left(1 - \\frac{1}{2^{i-1}}\\right)^{N}$$\nAs a sanity check, try substituting $N = 1$ and see that it matches the expected value (pun not intended).\nFor brevity, we change the indexing to 0-based and denote $p = \\frac{1}{2}$. We need to calculate $\\sum_{i\\ge 0} 1 - (1 - p^i)^N$ where $N$ is fixed.\nFinishing it off Using binomial theorem, the series is\n$$S = \\sum_{i \\ge 0}\\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} p^{ij}$$\nHere is the kicker: switch indexing.\n$$S = \\sum_{j = 1}^{N} \\sum_{i \\ge 0} \\binom{N}{j} (-1)^{N - j} p^{ij} = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\sum_{i \\ge 0} p^{ij}$$\nOf course, we know that the inner summation is merely the geometric series and so we can finish with the result (where $p$ still denotes $\\frac{1}{2}$).\n$$S = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\frac{1}{1 - p^j}$$\nThe problem is thus solved in complexity $O(N \\log(10^9 + 7))$.\nThe computation of binomial coefficients modulo a large prime is a fairly common idea in competitive programming: compute in advance the arrays $\\rm factorial[0..N]$ and $\\rm inverse\\_factorial[0..N]$ where computations are carried out modulo the prime $10^9 + 7$, that is, $\\rm inverse\\_factorial[i] \\cdot factorial[i] \\equiv 1 \\pmod {10^9 + 7}$. Computing inverses/reciprocals is done using Fermat\u0026rsquo;s theorem.\n","permalink":"http://localhost:1313/posts/2022-02-05-random-or/","summary":"\u003cp\u003eToday I\u0026rsquo;ll discuss a \u003ca href=\"https://www.codechef.com/FEB221A/problems/RANDOMOR\"\u003eprobability problem from CodeChef\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\u003c/p\u003e","title":"Random OR"},{"content":"Let\u0026rsquo;s look at this math problem from the recent AIsing Programming Contest 2020 on AtCoder.\nThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\nTo begin, it\u0026rsquo;s a good idea to cast the differences in the target expression as separate variables. Let\u0026rsquo;s rename $a_1$ as $a$ and $a_2$ as $a + a\u0026rsquo;$, so that $a\u0026rsquo; = a_2 - a_1$. It\u0026rsquo;s also a good idea to add a dummy $f \\ge 0$ to $(2)$ to the left side so that it becomes an equation. Under this renaming, things become slightly simpler. We\u0026rsquo;re now asked to evaluate the sum of \\[\\tag{1*} a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d\u0026rsquo; e\u0026rsquo;\\]for all tuples such that\\[\\tag{2*} 2(a + b + \\cdots + e) + (a\u0026rsquo; + b\u0026rsquo; + \\cdots + e\u0026rsquo;) + f = N \\]where\\[\\tag{3*} \\begin{cases}a, b, \\cdots, e, f \\ge 0 \\\\ a\u0026rsquo;, b\u0026rsquo;, c\u0026rsquo;, d\u0026rsquo;, e\u0026rsquo; \u0026gt; 0\\end{cases}\\]While the target expression $(1*)$ is simpler, we need to find out what to do about $(2*)$. Another greatly used tool in combinatorics is casting these problems in terms of generating functions and obtaining the solution by manipulating the power series.\nA few words on generating functions Consider multiplying two polynomials $f$ and $g$. Question: what exactly does the coefficient of $x^i$ denote? Described purely in words, it is the sum of product of coefficients in any two terms, one from $f$, and one from $g$, so that the sum of degrees of the terms is $i$. We can look at this for more than two polynomials: we pick one term each from every participating polynomial in the product, we find the sum of the degrees, and add the product of these coefficients to that term. We may think of the coefficients, then, as a form of weight for a term.\nThe technique we\u0026rsquo;re about to employ takes advantage of precisely this. We multiply many series, where each individual series corresponds to a variable. The exponents denote possible values for the variable, and a coefficient intuitively describes the weight in that term. Then the coefficients of the product are the sum of products of these weights.\nSolution We need to derive a generating function from $(2*)$. We\u0026rsquo;re adding up to $N$ using $11$ non-negative integers, where the first five of them are even (this is because of the coefficient $2$), and the next five of them are strictly positive. We also need to weigh the series that correspond to $a\u0026rsquo;, b\u0026rsquo;, \\cdots, e\u0026rsquo;$ so that we get the sum of $a\u0026rsquo;b\u0026rsquo;c\u0026rsquo;d\u0026rsquo;e\u0026rsquo;$ in the resulting product. This can be done by making the coefficient equal to the exponent (so that if $x^i$ is picked, it contributes $i$ to the product). So we obtain the following representation:\\[F(x) = (1 + x^2 + x^4 + \\cdots)^5 (1x + 2x^2 + 3x^3 + \\cdots )^5 (1 + x + x^2 + \\cdots)\\]and we need to find the coefficient of $x^N$ in $F(x)$ to obtain the answer. The first boss move in moving to the solution is noticing\\[x + 2x^2 + 3x^3 + \\cdots = x(1 + x + x^2 + \\cdots)^2\\]so that\\[F(x) = x^5 (1 + x^2 + x^4 + \\cdots)^5(1 + x + x^2 + \\cdots)^{11}\\]We should also remove the stupid $x^5$ because it\u0026rsquo;s of no use to us, and we can calculate the coefficient of $x^{N-5}$ in\\[F_2(x) = (1 + x^2 + x^4 + \\cdots)^5(1+x+x^2 + \\cdots)^{11}\\]We\u0026rsquo;ve hit the crux of the problem: what do we do with this? Life would have been much simpler if we had only a single type of exponentiated. Why? Because we have a closed form\\[\\tag{*} (1 + x + x^2 + \\cdots)^n = \\sum_{k = 0}^{\\infty} \\binom{n + k - 1}{k - 1} x^k\\]This is stars-and-bars in terms of generating functions.\nWithout further ado, here\u0026rsquo;s the big trick:\\[1 + x + x^2 + \\cdots = (1 + x)(1 + x^2 + x^4 + \\cdots)\\]And so\\[F_2(x) = (1+x)^{11} (1+x^2+x^4+\\cdots)^{16}\\]The first part $(1 + x)^{11}$ can be expanded using the binomial theorem, and the second part can be expanded using $(*)$. To evaluate the coefficient of $x^{N-5}$, we loop on the term from the binomial expansion, (say, the $x^i$ term) and multiply its coefficient by the coefficient of $x^{N-5-i}$ in the in the expansion of $(1 + x^2 + x^4 + \\cdots)^{16}$. And we\u0026rsquo;re done!\nA tiny implementation detail: To compute a binomial coefficient $\\binom{p}{q}$ with large $p$ and small $q$, it\u0026rsquo;s better to use the following:\\[\\binom{p}{q} = \\frac{p(p-1)\\cdots(p-q+1)}{q!}\\]Most problems involve precomputing factorials and their inverses, but this is not one of them.\n","permalink":"http://localhost:1313/posts/2020-08-03-generating-functions/","summary":"\u003cp\u003eLet\u0026rsquo;s look at this math problem from the recent \u003ca href=\"https://atcoder.jp/contests/aising2020/tasks/aising2020_f\"\u003eAIsing Programming Contest 2020 on AtCoder.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\u003c/p\u003e","title":"Generating Functions"},{"content":"Today I\u0026rsquo;ll discuss a probability problem from CodeChef.\nThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\nIf you are familiar with statistical distributions, you should immediately see the goal of this problem. Don\u0026rsquo;t worry if you are not - you should be able to follow.\nThe case $N = 1$ The only two choices for $X$ are $0$ and $1$ and the process terminates as soon as we get a $1$. This is visualised as tossing a coin and waiting until the first heads. The number of steps follows a geometric distribution with $p = \\frac{1}{2}$ (again, fret not if you don\u0026rsquo;t know what that means). It is worth mentioning how to calculate the expected value even though it is covered in the samples. Let $e$ denote the expected number of tosses until we meet our first $1$. On our first step, we either obtain a $1$ with probability $\\frac{1}{2}$ or we have to \u0026ldquo;reset\u0026rdquo; the process with probability $\\frac{1}{2}$. Thus, the equation is $e = \\frac{1}{2} \\cdot 1 + \\frac{1}{2} \\cdot (1 + e)$ which yields $e = 2$.\nUnderstanding the general case The general case is visualised as follows: do the above experiment with $N$ separate coins. What is the expected value of the maximum number of trials among them? Formally, we have $N$ iid random variables $X_1, \\cdots, X_N$ all following the geometric distribution with $p = \\frac{1}{2}$. What is the value of $E[Y]$ where $Y = \\max X_i$?\nWe know by the definition of expected value that $E[Y] = \\sum_{i \\ge 1} i\\cdot P(Y = i)$. But this can also be seen as $E[Y] = \\sum_{i \\ge 1} P(Y \\ge i)$. Why? Try writing $P(Y \\ge i)$ as $P(Y = i) + P(Y = i + 1) + \\cdots$ and check that this becomes the original definition. And so, since the $N$ variables are independent,\n$$E[Y] = \\sum_{i \\ge 1} 1 - P(Y \u0026lt; i) = \\sum_{i \\ge 1} 1 - P(X_1 \u0026lt; i) \\cdots P(X_N \u0026lt; i)$$\nThe probability $P(X_1 \u0026lt; i)$ is $1 - P(X_1 \\ge i)$. Note that $P(X_1 \\ge i)$ means that you want the first $i - 1$ tosses to appear as tails the probability of which is $\\frac{1}{2^{i - 1}}$. The same goes for $X_2$ through $X_N$ as they are identically distributed. Thus,\n$$E[Y] = \\sum_{i \\ge 1} 1 - \\left(1 - \\frac{1}{2^{i-1}}\\right)^{N}$$\nAs a sanity check, try substituting $N = 1$ and see that it matches the expected value (pun not intended).\nFor brevity, we change the indexing to 0-based and denote $p = \\frac{1}{2}$. We need to calculate $\\sum_{i\\ge 0} 1 - (1 - p^i)^N$ where $N$ is fixed.\nFinishing it off Using binomial theorem, the series is\n$$S = \\sum_{i \\ge 0}\\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} p^{ij}$$\nHere is the kicker: switch indexing.\n$$S = \\sum_{j = 1}^{N} \\sum_{i \\ge 0} \\binom{N}{j} (-1)^{N - j} p^{ij} = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\sum_{i \\ge 0} p^{ij}$$\nOf course, we know that the inner summation is merely the geometric series and so we can finish with the result (where $p$ still denotes $\\frac{1}{2}$).\n$$S = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\frac{1}{1 - p^j}$$\nThe problem is thus solved in complexity $O(N \\log(10^9 + 7))$.\nThe computation of binomial coefficients modulo a large prime is a fairly common idea in competitive programming: compute in advance the arrays $\\rm factorial[0..N]$ and $\\rm inverse\\_factorial[0..N]$ where computations are carried out modulo the prime $10^9 + 7$, that is, $\\rm inverse\\_factorial[i] \\cdot factorial[i] \\equiv 1 \\pmod {10^9 + 7}$. Computing inverses/reciprocals is done using Fermat\u0026rsquo;s theorem.\n","permalink":"http://localhost:1313/posts/2022-02-05-random-or/","summary":"\u003cp\u003eToday I\u0026rsquo;ll discuss a \u003ca href=\"https://www.codechef.com/FEB221A/problems/RANDOMOR\"\u003eprobability problem from CodeChef\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\u003c/p\u003e","title":"Random OR"},{"content":"Let\u0026rsquo;s look at this math problem from the recent AIsing Programming Contest 2020 on AtCoder.\nThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\nTo begin, it\u0026rsquo;s a good idea to cast the differences in the target expression as separate variables. Let\u0026rsquo;s rename $a_1$ as $a$ and $a_2$ as $a + a\u0026rsquo;$, so that $a\u0026rsquo; = a_2 - a_1$. It\u0026rsquo;s also a good idea to add a dummy $f \\ge 0$ to $(2)$ to the left side so that it becomes an equation. Under this renaming, things become slightly simpler. We\u0026rsquo;re now asked to evaluate the sum of \\[\\tag{1*} a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d\u0026rsquo; e\u0026rsquo;\\]for all tuples such that\\[\\tag{2*} 2(a + b + \\cdots + e) + (a\u0026rsquo; + b\u0026rsquo; + \\cdots + e\u0026rsquo;) + f = N \\]where\\[\\tag{3*} \\begin{cases}a, b, \\cdots, e, f \\ge 0 \\\\ a\u0026rsquo;, b\u0026rsquo;, c\u0026rsquo;, d\u0026rsquo;, e\u0026rsquo; \u0026gt; 0\\end{cases}\\]While the target expression $(1*)$ is simpler, we need to find out what to do about $(2*)$. Another greatly used tool in combinatorics is casting these problems in terms of generating functions and obtaining the solution by manipulating the power series.\nA few words on generating functions Consider multiplying two polynomials $f$ and $g$. Question: what exactly does the coefficient of $x^i$ denote? Described purely in words, it is the sum of product of coefficients in any two terms, one from $f$, and one from $g$, so that the sum of degrees of the terms is $i$. We can look at this for more than two polynomials: we pick one term each from every participating polynomial in the product, we find the sum of the degrees, and add the product of these coefficients to that term. We may think of the coefficients, then, as a form of weight for a term.\nThe technique we\u0026rsquo;re about to employ takes advantage of precisely this. We multiply many series, where each individual series corresponds to a variable. The exponents denote possible values for the variable, and a coefficient intuitively describes the weight in that term. Then the coefficients of the product are the sum of products of these weights.\nSolution We need to derive a generating function from $(2*)$. We\u0026rsquo;re adding up to $N$ using $11$ non-negative integers, where the first five of them are even (this is because of the coefficient $2$), and the next five of them are strictly positive. We also need to weigh the series that correspond to $a\u0026rsquo;, b\u0026rsquo;, \\cdots, e\u0026rsquo;$ so that we get the sum of $a\u0026rsquo;b\u0026rsquo;c\u0026rsquo;d\u0026rsquo;e\u0026rsquo;$ in the resulting product. This can be done by making the coefficient equal to the exponent (so that if $x^i$ is picked, it contributes $i$ to the product). So we obtain the following representation:\\[F(x) = (1 + x^2 + x^4 + \\cdots)^5 (1x + 2x^2 + 3x^3 + \\cdots )^5 (1 + x + x^2 + \\cdots)\\]and we need to find the coefficient of $x^N$ in $F(x)$ to obtain the answer. The first boss move in moving to the solution is noticing\\[x + 2x^2 + 3x^3 + \\cdots = x(1 + x + x^2 + \\cdots)^2\\]so that\\[F(x) = x^5 (1 + x^2 + x^4 + \\cdots)^5(1 + x + x^2 + \\cdots)^{11}\\]We should also remove the stupid $x^5$ because it\u0026rsquo;s of no use to us, and we can calculate the coefficient of $x^{N-5}$ in\\[F_2(x) = (1 + x^2 + x^4 + \\cdots)^5(1+x+x^2 + \\cdots)^{11}\\]We\u0026rsquo;ve hit the crux of the problem: what do we do with this? Life would have been much simpler if we had only a single type of exponentiated. Why? Because we have a closed form\\[\\tag{*} (1 + x + x^2 + \\cdots)^n = \\sum_{k = 0}^{\\infty} \\binom{n + k - 1}{k - 1} x^k\\]This is stars-and-bars in terms of generating functions.\nWithout further ado, here\u0026rsquo;s the big trick:\\[1 + x + x^2 + \\cdots = (1 + x)(1 + x^2 + x^4 + \\cdots)\\]And so\\[F_2(x) = (1+x)^{11} (1+x^2+x^4+\\cdots)^{16}\\]The first part $(1 + x)^{11}$ can be expanded using the binomial theorem, and the second part can be expanded using $(*)$. To evaluate the coefficient of $x^{N-5}$, we loop on the term from the binomial expansion, (say, the $x^i$ term) and multiply its coefficient by the coefficient of $x^{N-5-i}$ in the in the expansion of $(1 + x^2 + x^4 + \\cdots)^{16}$. And we\u0026rsquo;re done!\nA tiny implementation detail: To compute a binomial coefficient $\\binom{p}{q}$ with large $p$ and small $q$, it\u0026rsquo;s better to use the following:\\[\\binom{p}{q} = \\frac{p(p-1)\\cdots(p-q+1)}{q!}\\]Most problems involve precomputing factorials and their inverses, but this is not one of them.\n","permalink":"http://localhost:1313/posts/2020-08-03-generating-functions/","summary":"\u003cp\u003eLet\u0026rsquo;s look at this math problem from the recent \u003ca href=\"https://atcoder.jp/contests/aising2020/tasks/aising2020_f\"\u003eAIsing Programming Contest 2020 on AtCoder.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\u003c/p\u003e","title":"Generating Functions"},{"content":"Today I\u0026rsquo;ll discuss a probability problem from CodeChef.\nThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\nIf you are familiar with statistical distributions, you should immediately see the goal of this problem. Don\u0026rsquo;t worry if you are not - you should be able to follow.\nThe case $N = 1$ The only two choices for $X$ are $0$ and $1$ and the process terminates as soon as we get a $1$. This is visualised as tossing a coin and waiting until the first heads. The number of steps follows a geometric distribution with $p = \\frac{1}{2}$ (again, fret not if you don\u0026rsquo;t know what that means). It is worth mentioning how to calculate the expected value even though it is covered in the samples. Let $e$ denote the expected number of tosses until we meet our first $1$. On our first step, we either obtain a $1$ with probability $\\frac{1}{2}$ or we have to \u0026ldquo;reset\u0026rdquo; the process with probability $\\frac{1}{2}$. Thus, the equation is $e = \\frac{1}{2} \\cdot 1 + \\frac{1}{2} \\cdot (1 + e)$ which yields $e = 2$.\nUnderstanding the general case The general case is visualised as follows: do the above experiment with $N$ separate coins. What is the expected value of the maximum number of trials among them? Formally, we have $N$ iid random variables $X_1, \\cdots, X_N$ all following the geometric distribution with $p = \\frac{1}{2}$. What is the value of $E[Y]$ where $Y = \\max X_i$?\nWe know by the definition of expected value that $E[Y] = \\sum_{i \\ge 1} i\\cdot P(Y = i)$. But this can also be seen as $E[Y] = \\sum_{i \\ge 1} P(Y \\ge i)$. Why? Try writing $P(Y \\ge i)$ as $P(Y = i) + P(Y = i + 1) + \\cdots$ and check that this becomes the original definition. And so, since the $N$ variables are independent,\n$$E[Y] = \\sum_{i \\ge 1} 1 - P(Y \u0026lt; i) = \\sum_{i \\ge 1} 1 - P(X_1 \u0026lt; i) \\cdots P(X_N \u0026lt; i)$$\nThe probability $P(X_1 \u0026lt; i)$ is $1 - P(X_1 \\ge i)$. Note that $P(X_1 \\ge i)$ means that you want the first $i - 1$ tosses to appear as tails the probability of which is $\\frac{1}{2^{i - 1}}$. The same goes for $X_2$ through $X_N$ as they are identically distributed. Thus,\n$$E[Y] = \\sum_{i \\ge 1} 1 - \\left(1 - \\frac{1}{2^{i-1}}\\right)^{N}$$\nAs a sanity check, try substituting $N = 1$ and see that it matches the expected value (pun not intended).\nFor brevity, we change the indexing to 0-based and denote $p = \\frac{1}{2}$. We need to calculate $\\sum_{i\\ge 0} 1 - (1 - p^i)^N$ where $N$ is fixed.\nFinishing it off Using binomial theorem, the series is\n$$S = \\sum_{i \\ge 0}\\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} p^{ij}$$\nHere is the kicker: switch indexing.\n$$S = \\sum_{j = 1}^{N} \\sum_{i \\ge 0} \\binom{N}{j} (-1)^{N - j} p^{ij} = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\sum_{i \\ge 0} p^{ij}$$\nOf course, we know that the inner summation is merely the geometric series and so we can finish with the result (where $p$ still denotes $\\frac{1}{2}$).\n$$S = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\frac{1}{1 - p^j}$$\nThe problem is thus solved in complexity $O(N \\log(10^9 + 7))$.\nThe computation of binomial coefficients modulo a large prime is a fairly common idea in competitive programming: compute in advance the arrays $\\rm factorial[0..N]$ and $\\rm inverse\\_factorial[0..N]$ where computations are carried out modulo the prime $10^9 + 7$, that is, $\\rm inverse\\_factorial[i] \\cdot factorial[i] \\equiv 1 \\pmod {10^9 + 7}$. Computing inverses/reciprocals is done using Fermat\u0026rsquo;s theorem.\n","permalink":"http://localhost:1313/posts/2022-02-05-random-or/","summary":"\u003cp\u003eToday I\u0026rsquo;ll discuss a \u003ca href=\"https://www.codechef.com/FEB221A/problems/RANDOMOR\"\u003eprobability problem from CodeChef\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\u003c/p\u003e","title":"Random OR"},{"content":"Today I\u0026rsquo;ll discuss a probability problem from CodeChef.\nThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\nIf you are familiar with statistical distributions, you should immediately see the goal of this problem. Don\u0026rsquo;t worry if you are not - you should be able to follow.\nThe case $N = 1$ The only two choices for $X$ are $0$ and $1$ and the process terminates as soon as we get a $1$. This is visualised as tossing a coin and waiting until the first heads. The number of steps follows a geometric distribution with $p = \\frac{1}{2}$ (again, fret not if you don\u0026rsquo;t know what that means). It is worth mentioning how to calculate the expected value even though it is covered in the samples. Let $e$ denote the expected number of tosses until we meet our first $1$. On our first step, we either obtain a $1$ with probability $\\frac{1}{2}$ or we have to \u0026ldquo;reset\u0026rdquo; the process with probability $\\frac{1}{2}$. Thus, the equation is $e = \\frac{1}{2} \\cdot 1 + \\frac{1}{2} \\cdot (1 + e)$ which yields $e = 2$.\nUnderstanding the general case The general case is visualised as follows: do the above experiment with $N$ separate coins. What is the expected value of the maximum number of trials among them? Formally, we have $N$ iid random variables $X_1, \\cdots, X_N$ all following the geometric distribution with $p = \\frac{1}{2}$. What is the value of $E[Y]$ where $Y = \\max X_i$?\nWe know by the definition of expected value that $E[Y] = \\sum_{i \\ge 1} i\\cdot P(Y = i)$. But this can also be seen as $E[Y] = \\sum_{i \\ge 1} P(Y \\ge i)$. Why? Try writing $P(Y \\ge i)$ as $P(Y = i) + P(Y = i + 1) + \\cdots$ and check that this becomes the original definition. And so, since the $N$ variables are independent,\n$$E[Y] = \\sum_{i \\ge 1} 1 - P(Y \u0026lt; i) = \\sum_{i \\ge 1} 1 - P(X_1 \u0026lt; i) \\cdots P(X_N \u0026lt; i)$$\nThe probability $P(X_1 \u0026lt; i)$ is $1 - P(X_1 \\ge i)$. Note that $P(X_1 \\ge i)$ means that you want the first $i - 1$ tosses to appear as tails the probability of which is $\\frac{1}{2^{i - 1}}$. The same goes for $X_2$ through $X_N$ as they are identically distributed. Thus,\n$$E[Y] = \\sum_{i \\ge 1} 1 - \\left(1 - \\frac{1}{2^{i-1}}\\right)^{N}$$\nAs a sanity check, try substituting $N = 1$ and see that it matches the expected value (pun not intended).\nFor brevity, we change the indexing to 0-based and denote $p = \\frac{1}{2}$. We need to calculate $\\sum_{i\\ge 0} 1 - (1 - p^i)^N$ where $N$ is fixed.\nFinishing it off Using binomial theorem, the series is\n$$S = \\sum_{i \\ge 0}\\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} p^{ij}$$\nHere is the kicker: switch indexing.\n$$S = \\sum_{j = 1}^{N} \\sum_{i \\ge 0} \\binom{N}{j} (-1)^{N - j} p^{ij} = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\sum_{i \\ge 0} p^{ij}$$\nOf course, we know that the inner summation is merely the geometric series and so we can finish with the result (where $p$ still denotes $\\frac{1}{2}$).\n$$S = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\frac{1}{1 - p^j}$$\nThe problem is thus solved in complexity $O(N \\log(10^9 + 7))$.\nThe computation of binomial coefficients modulo a large prime is a fairly common idea in competitive programming: compute in advance the arrays $\\rm factorial[0..N]$ and $\\rm inverse\\_factorial[0..N]$ where computations are carried out modulo the prime $10^9 + 7$, that is, $\\rm inverse\\_factorial[i] \\cdot factorial[i] \\equiv 1 \\pmod {10^9 + 7}$. Computing inverses/reciprocals is done using Fermat\u0026rsquo;s theorem.\n","permalink":"http://localhost:1313/posts/2022-02-05-random-or/","summary":"\u003cp\u003eToday I\u0026rsquo;ll discuss a \u003ca href=\"https://www.codechef.com/FEB221A/problems/RANDOMOR\"\u003eprobability problem from CodeChef\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\u003c/p\u003e","title":"Random OR"},{"content":"Let\u0026rsquo;s look at this math problem from the recent AIsing Programming Contest 2020 on AtCoder.\nThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\nTo begin, it\u0026rsquo;s a good idea to cast the differences in the target expression as separate variables. Let\u0026rsquo;s rename $a_1$ as $a$ and $a_2$ as $a + a\u0026rsquo;$, so that $a\u0026rsquo; = a_2 - a_1$. It\u0026rsquo;s also a good idea to add a dummy $f \\ge 0$ to $(2)$ to the left side so that it becomes an equation. Under this renaming, things become slightly simpler. We\u0026rsquo;re now asked to evaluate the sum of \\[\\tag{1*} a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d\u0026rsquo; e\u0026rsquo;\\]for all tuples such that\\[\\tag{2*} 2(a + b + \\cdots + e) + (a\u0026rsquo; + b\u0026rsquo; + \\cdots + e\u0026rsquo;) + f = N \\]where\\[\\tag{3*} \\begin{cases}a, b, \\cdots, e, f \\ge 0 \\\\ a\u0026rsquo;, b\u0026rsquo;, c\u0026rsquo;, d\u0026rsquo;, e\u0026rsquo; \u0026gt; 0\\end{cases}\\]While the target expression $(1*)$ is simpler, we need to find out what to do about $(2*)$. Another greatly used tool in combinatorics is casting these problems in terms of generating functions and obtaining the solution by manipulating the power series.\nA few words on generating functions Consider multiplying two polynomials $f$ and $g$. Question: what exactly does the coefficient of $x^i$ denote? Described purely in words, it is the sum of product of coefficients in any two terms, one from $f$, and one from $g$, so that the sum of degrees of the terms is $i$. We can look at this for more than two polynomials: we pick one term each from every participating polynomial in the product, we find the sum of the degrees, and add the product of these coefficients to that term. We may think of the coefficients, then, as a form of weight for a term.\nThe technique we\u0026rsquo;re about to employ takes advantage of precisely this. We multiply many series, where each individual series corresponds to a variable. The exponents denote possible values for the variable, and a coefficient intuitively describes the weight in that term. Then the coefficients of the product are the sum of products of these weights.\nSolution We need to derive a generating function from $(2*)$. We\u0026rsquo;re adding up to $N$ using $11$ non-negative integers, where the first five of them are even (this is because of the coefficient $2$), and the next five of them are strictly positive. We also need to weigh the series that correspond to $a\u0026rsquo;, b\u0026rsquo;, \\cdots, e\u0026rsquo;$ so that we get the sum of $a\u0026rsquo;b\u0026rsquo;c\u0026rsquo;d\u0026rsquo;e\u0026rsquo;$ in the resulting product. This can be done by making the coefficient equal to the exponent (so that if $x^i$ is picked, it contributes $i$ to the product). So we obtain the following representation:\\[F(x) = (1 + x^2 + x^4 + \\cdots)^5 (1x + 2x^2 + 3x^3 + \\cdots )^5 (1 + x + x^2 + \\cdots)\\]and we need to find the coefficient of $x^N$ in $F(x)$ to obtain the answer. The first boss move in moving to the solution is noticing\\[x + 2x^2 + 3x^3 + \\cdots = x(1 + x + x^2 + \\cdots)^2\\]so that\\[F(x) = x^5 (1 + x^2 + x^4 + \\cdots)^5(1 + x + x^2 + \\cdots)^{11}\\]We should also remove the stupid $x^5$ because it\u0026rsquo;s of no use to us, and we can calculate the coefficient of $x^{N-5}$ in\\[F_2(x) = (1 + x^2 + x^4 + \\cdots)^5(1+x+x^2 + \\cdots)^{11}\\]We\u0026rsquo;ve hit the crux of the problem: what do we do with this? Life would have been much simpler if we had only a single type of exponentiated. Why? Because we have a closed form\\[\\tag{*} (1 + x + x^2 + \\cdots)^n = \\sum_{k = 0}^{\\infty} \\binom{n + k - 1}{k - 1} x^k\\]This is stars-and-bars in terms of generating functions.\nWithout further ado, here\u0026rsquo;s the big trick:\\[1 + x + x^2 + \\cdots = (1 + x)(1 + x^2 + x^4 + \\cdots)\\]And so\\[F_2(x) = (1+x)^{11} (1+x^2+x^4+\\cdots)^{16}\\]The first part $(1 + x)^{11}$ can be expanded using the binomial theorem, and the second part can be expanded using $(*)$. To evaluate the coefficient of $x^{N-5}$, we loop on the term from the binomial expansion, (say, the $x^i$ term) and multiply its coefficient by the coefficient of $x^{N-5-i}$ in the in the expansion of $(1 + x^2 + x^4 + \\cdots)^{16}$. And we\u0026rsquo;re done!\nA tiny implementation detail: To compute a binomial coefficient $\\binom{p}{q}$ with large $p$ and small $q$, it\u0026rsquo;s better to use the following:\\[\\binom{p}{q} = \\frac{p(p-1)\\cdots(p-q+1)}{q!}\\]Most problems involve precomputing factorials and their inverses, but this is not one of them.\n","permalink":"http://localhost:1313/posts/2020-08-03-generating-functions/","summary":"\u003cp\u003eLet\u0026rsquo;s look at this math problem from the recent \u003ca href=\"https://atcoder.jp/contests/aising2020/tasks/aising2020_f\"\u003eAIsing Programming Contest 2020 on AtCoder.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\u003c/p\u003e","title":"Generating Functions"},{"content":"Today I\u0026rsquo;ll discuss a probability problem from CodeChef.\nThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\nIf you are familiar with statistical distributions, you should immediately see the goal of this problem. Don\u0026rsquo;t worry if you are not - you should be able to follow.\nThe case $N = 1$ The only two choices for $X$ are $0$ and $1$ and the process terminates as soon as we get a $1$. This is visualised as tossing a coin and waiting until the first heads. The number of steps follows a geometric distribution with $p = \\frac{1}{2}$ (again, fret not if you don\u0026rsquo;t know what that means). It is worth mentioning how to calculate the expected value even though it is covered in the samples. Let $e$ denote the expected number of tosses until we meet our first $1$. On our first step, we either obtain a $1$ with probability $\\frac{1}{2}$ or we have to \u0026ldquo;reset\u0026rdquo; the process with probability $\\frac{1}{2}$. Thus, the equation is $e = \\frac{1}{2} \\cdot 1 + \\frac{1}{2} \\cdot (1 + e)$ which yields $e = 2$.\nUnderstanding the general case The general case is visualised as follows: do the above experiment with $N$ separate coins. What is the expected value of the maximum number of trials among them? Formally, we have $N$ iid random variables $X_1, \\cdots, X_N$ all following the geometric distribution with $p = \\frac{1}{2}$. What is the value of $E[Y]$ where $Y = \\max X_i$?\nWe know by the definition of expected value that $E[Y] = \\sum_{i \\ge 1} i\\cdot P(Y = i)$. But this can also be seen as $E[Y] = \\sum_{i \\ge 1} P(Y \\ge i)$. Why? Try writing $P(Y \\ge i)$ as $P(Y = i) + P(Y = i + 1) + \\cdots$ and check that this becomes the original definition. And so, since the $N$ variables are independent,\n$$E[Y] = \\sum_{i \\ge 1} 1 - P(Y \u0026lt; i) = \\sum_{i \\ge 1} 1 - P(X_1 \u0026lt; i) \\cdots P(X_N \u0026lt; i)$$\nThe probability $P(X_1 \u0026lt; i)$ is $1 - P(X_1 \\ge i)$. Note that $P(X_1 \\ge i)$ means that you want the first $i - 1$ tosses to appear as tails the probability of which is $\\frac{1}{2^{i - 1}}$. The same goes for $X_2$ through $X_N$ as they are identically distributed. Thus,\n$$E[Y] = \\sum_{i \\ge 1} 1 - \\left(1 - \\frac{1}{2^{i-1}}\\right)^{N}$$\nAs a sanity check, try substituting $N = 1$ and see that it matches the expected value (pun not intended).\nFor brevity, we change the indexing to 0-based and denote $p = \\frac{1}{2}$. We need to calculate $\\sum_{i\\ge 0} 1 - (1 - p^i)^N$ where $N$ is fixed.\nFinishing it off Using binomial theorem, the series is\n$$S = \\sum_{i \\ge 0}\\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} p^{ij}$$\nHere is the kicker: switch indexing.\n$$S = \\sum_{j = 1}^{N} \\sum_{i \\ge 0} \\binom{N}{j} (-1)^{N - j} p^{ij} = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\sum_{i \\ge 0} p^{ij}$$\nOf course, we know that the inner summation is merely the geometric series and so we can finish with the result (where $p$ still denotes $\\frac{1}{2}$).\n$$S = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\frac{1}{1 - p^j}$$\nThe problem is thus solved in complexity $O(N \\log(10^9 + 7))$.\nThe computation of binomial coefficients modulo a large prime is a fairly common idea in competitive programming: compute in advance the arrays $\\rm factorial[0..N]$ and $\\rm inverse\\_factorial[0..N]$ where computations are carried out modulo the prime $10^9 + 7$, that is, $\\rm inverse\\_factorial[i] \\cdot factorial[i] \\equiv 1 \\pmod {10^9 + 7}$. Computing inverses/reciprocals is done using Fermat\u0026rsquo;s theorem.\n","permalink":"http://localhost:1313/posts/2022-02-05-random-or/","summary":"\u003cp\u003eToday I\u0026rsquo;ll discuss a \u003ca href=\"https://www.codechef.com/FEB221A/problems/RANDOMOR\"\u003eprobability problem from CodeChef\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\u003c/p\u003e","title":"Random OR"},{"content":"Let\u0026rsquo;s look at this math problem from the recent AIsing Programming Contest 2020 on AtCoder.\nThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\nTo begin, it\u0026rsquo;s a good idea to cast the differences in the target expression as separate variables. Let\u0026rsquo;s rename $a_1$ as $a$ and $a_2$ as $a + a\u0026rsquo;$, so that $a\u0026rsquo; = a_2 - a_1$. It\u0026rsquo;s also a good idea to add a dummy $f \\ge 0$ to $(2)$ to the left side so that it becomes an equation. Under this renaming, things become slightly simpler. We\u0026rsquo;re now asked to evaluate the sum of \\[\\tag{1*} a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d\u0026rsquo; e\u0026rsquo;\\]for all tuples such that\\[\\tag{2*} 2(a + b + \\cdots + e) + (a\u0026rsquo; + b\u0026rsquo; + \\cdots + e\u0026rsquo;) + f = N \\]where\\[\\tag{3*} \\begin{cases}a, b, \\cdots, e, f \\ge 0 \\\\ a\u0026rsquo;, b\u0026rsquo;, c\u0026rsquo;, d\u0026rsquo;, e\u0026rsquo; \u0026gt; 0\\end{cases}\\]While the target expression $(1*)$ is simpler, we need to find out what to do about $(2*)$. Another greatly used tool in combinatorics is casting these problems in terms of generating functions and obtaining the solution by manipulating the power series.\nA few words on generating functions Consider multiplying two polynomials $f$ and $g$. Question: what exactly does the coefficient of $x^i$ denote? Described purely in words, it is the sum of product of coefficients in any two terms, one from $f$, and one from $g$, so that the sum of degrees of the terms is $i$. We can look at this for more than two polynomials: we pick one term each from every participating polynomial in the product, we find the sum of the degrees, and add the product of these coefficients to that term. We may think of the coefficients, then, as a form of weight for a term.\nThe technique we\u0026rsquo;re about to employ takes advantage of precisely this. We multiply many series, where each individual series corresponds to a variable. The exponents denote possible values for the variable, and a coefficient intuitively describes the weight in that term. Then the coefficients of the product are the sum of products of these weights.\nSolution We need to derive a generating function from $(2*)$. We\u0026rsquo;re adding up to $N$ using $11$ non-negative integers, where the first five of them are even (this is because of the coefficient $2$), and the next five of them are strictly positive. We also need to weigh the series that correspond to $a\u0026rsquo;, b\u0026rsquo;, \\cdots, e\u0026rsquo;$ so that we get the sum of $a\u0026rsquo;b\u0026rsquo;c\u0026rsquo;d\u0026rsquo;e\u0026rsquo;$ in the resulting product. This can be done by making the coefficient equal to the exponent (so that if $x^i$ is picked, it contributes $i$ to the product). So we obtain the following representation:\\[F(x) = (1 + x^2 + x^4 + \\cdots)^5 (1x + 2x^2 + 3x^3 + \\cdots )^5 (1 + x + x^2 + \\cdots)\\]and we need to find the coefficient of $x^N$ in $F(x)$ to obtain the answer. The first boss move in moving to the solution is noticing\\[x + 2x^2 + 3x^3 + \\cdots = x(1 + x + x^2 + \\cdots)^2\\]so that\\[F(x) = x^5 (1 + x^2 + x^4 + \\cdots)^5(1 + x + x^2 + \\cdots)^{11}\\]We should also remove the stupid $x^5$ because it\u0026rsquo;s of no use to us, and we can calculate the coefficient of $x^{N-5}$ in\\[F_2(x) = (1 + x^2 + x^4 + \\cdots)^5(1+x+x^2 + \\cdots)^{11}\\]We\u0026rsquo;ve hit the crux of the problem: what do we do with this? Life would have been much simpler if we had only a single type of exponentiated. Why? Because we have a closed form\\[\\tag{*} (1 + x + x^2 + \\cdots)^n = \\sum_{k = 0}^{\\infty} \\binom{n + k - 1}{k - 1} x^k\\]This is stars-and-bars in terms of generating functions.\nWithout further ado, here\u0026rsquo;s the big trick:\\[1 + x + x^2 + \\cdots = (1 + x)(1 + x^2 + x^4 + \\cdots)\\]And so\\[F_2(x) = (1+x)^{11} (1+x^2+x^4+\\cdots)^{16}\\]The first part $(1 + x)^{11}$ can be expanded using the binomial theorem, and the second part can be expanded using $(*)$. To evaluate the coefficient of $x^{N-5}$, we loop on the term from the binomial expansion, (say, the $x^i$ term) and multiply its coefficient by the coefficient of $x^{N-5-i}$ in the in the expansion of $(1 + x^2 + x^4 + \\cdots)^{16}$. And we\u0026rsquo;re done!\nA tiny implementation detail: To compute a binomial coefficient $\\binom{p}{q}$ with large $p$ and small $q$, it\u0026rsquo;s better to use the following:\\[\\binom{p}{q} = \\frac{p(p-1)\\cdots(p-q+1)}{q!}\\]Most problems involve precomputing factorials and their inverses, but this is not one of them.\n","permalink":"http://localhost:1313/posts/2020-08-03-generating-functions/","summary":"\u003cp\u003eLet\u0026rsquo;s look at this math problem from the recent \u003ca href=\"https://atcoder.jp/contests/aising2020/tasks/aising2020_f\"\u003eAIsing Programming Contest 2020 on AtCoder.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\u003c/p\u003e","title":"Generating Functions"},{"content":"Today we take a look at the problem ABC241 H.\nWe are given $N \\le 16$ distinct numbers $A_1, \\cdots, A_N$ and a sequence describing the amount of supply of each number: a sequence $B_1, \\cdots, B_N$ where $B_i$ refers to the supply of the number $A_i$. The score of a combination of $M$ chosen numbers is the product of the numbers. That is, suppose we pick $C_i$ occurences of the $A_i$ where $0 \\le C_i \\le B_i$ and $\\sum C_i = M$, then $\\text{score}(C) = \\prod_{i = 1}^{N} A_i^{C_i}$. The objective is to find the sum of scores over all possible valid combinations.\nThis statement might sound convoluted, but its intent is very clearly and naturally expressed in the language of generating functions. Observe that it translates to finding the coefficient of $x^M$ in the following:\n$$F(x) = \\prod_{i=1}^{N} \\sum_{j = 0}^{B_i} (A_j x)^j$$\nHere, the index $j$ represents the number of picked $A_i$\u0026rsquo;s. The sum of powers of $x$ should be $M$, and so our generating function would conveniently pick every valid combination of summing up to $M$ and collect the score for each such combination. Let\u0026rsquo;s now use the following identity:\n$$\\sum_{i=0}^{n} y^i = \\frac{1 - y^{n + 1}}{1 - y}$$\nAnd we get the following product:\n$$F(x) = \\prod_{i = 1}^{N} \\frac {1 - (A_i x)^{B_i+1}}{1 - A_i x}$$\nRemember that we are still only looking for the coefficient of $x^M$. The $B_i$\u0026rsquo;s are sort of annoying, so let\u0026rsquo;s turn our attention to a simpler problem: what if we have infinite supplies of each? In that case, we need the coefficient of $x^M$ in\n$$G(x) = \\prod_{i=1}^{N} \\frac{1}{1 - A_i x}$$\nWhich looks awfully familiar - oh wait, this can be decomposed using partial fractions! So let\u0026rsquo;s do it:\n$$G(x) = \\prod_{i = 1}^{N} \\frac{1}{1 - A_i x} = \\sum_{i = 1}^{N}\\frac{c_i}{1 - A_i x}$$\nA gentle reminder that it\u0026rsquo;s very easy to compute the decomposition when the denominator is conveniently split into a simple product of linear factors - it\u0026rsquo;s a matter of multiplying the product $\\prod_{i=1}^{N} (1 - A_i x)$ and for each $i$, plugging in $x = \\frac{1}{A_i}$, turning all except the term involving $c_i$ equal to $0$. This is naively done in $O(N^2)$ which is good enough given the unusually low constraint for $N$. To find the coefficient of $x^M$, we just expand $\\frac{1}{1 - A_i x}$ and see that it is doable in $O(N\\log_2{M})$ with binary exponentiation.\n$$G(x) = \\sum_{i=1}^{N} \\sum_{j=0}^{\\infty} c_i A_i^j x^j \\implies [x^M]G(x) = \\sum_{i=1}^{N} c_i A_i^{M} $$\nThere\u0026rsquo;s actually not much to be done at this point. Notice that\n$$F(x) = G(x) \\prod_{i=1}^{N} (1 - (A_i x)^{B_i + 1})$$\nThe product is interesting. For the $i$-th factor, we are making a choice: pick one of the two terms $1$ and $-(A_i x)^{B_i + 1}$. All $N$ choices are independent over every $i$ and so we have $2^N$ ways. We can look at every such way independently and add up the resulting coefficients of $x^M$ to obtain the answer. For example, one of these ways is choosing $1$ in every factor. In fact, this series of choices yields $G(x)$, so finding the coefficient of $x^M$ is exactly what we did above.\nThe other cases are not very different. Suppose the sum of the picked powers of $x$ in our $N$ choices is $s$ and the collected coefficient is $p$ (for example, $s = 0$ and $p = 1$ when we pick all $1$s). Then we need to find the coefficient of $x^{M - s}$ in $G(x)$ and multiply it by $p$ to give us one of the terms in the sum that involves $2^N$ terms. Of course, the coefficient of $x^{M - s}$ can be found in the same way as that of $x^M$. This gives us an $O(N^2 + 2^N \\cdot N \\cdot \\log_2 M)$ solution.\nIt is interesting to note that what we have done here is simply the inclusion-exclusion principle. We noticed that the answer is easily computable in the unrestricted case (call it $g(s)$ where $s$ is the sum of chosen numbers) and we want to compute it for the restricted case, call it $f(s)$. Then we look at the answer when some set of indices $S \\subseteq \\{ 1, \\cdots, n \\}$ violates its constraint, i.e., for every $i \\in S$, $C_i \\ge B_i + 1$ which is the same as an unrestricted $C_i\u0026rsquo; = C_i - (B_i + 1) \\ge 0$ (except the score is scaled up by $A_i^{B_i + 1}$ to account for the offset) and so the expression looks like $$ f(M) = \\sum_{S} (-1)^{ \\mid S \\mid } \\left(\\prod_{i \\in S} A_i^{B_i + 1}\\right)g\\left(M - \\sum_{i\\in S} (B_i + 1)\\right)$$. This is identical to what we obtained using generating functions.\n","permalink":"http://localhost:1313/posts/2022-02-28-generating-functions-2/","summary":"\u003cp\u003eToday we take a look at the problem \u003ca href=\"https://atcoder.jp/contests/abc241/tasks/abc241_h\"\u003eABC241 H\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe are given $N \\le 16$ distinct numbers $A_1, \\cdots, A_N$ and a sequence describing the amount of supply of each number: a sequence $B_1, \\cdots, B_N$ where $B_i$ refers to the supply of the number $A_i$. The score of a combination of $M$ chosen numbers is the product of the numbers. That is, suppose we pick $C_i$ occurences of the $A_i$ where $0 \\le C_i \\le B_i$ and $\\sum C_i = M$, then $\\text{score}(C) = \\prod_{i = 1}^{N} A_i^{C_i}$. The objective is to find the sum of scores over all possible valid combinations.\u003c/p\u003e","title":"More Generating Functions"},{"content":"Today I\u0026rsquo;ll discuss a probability problem from CodeChef.\nThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\nIf you are familiar with statistical distributions, you should immediately see the goal of this problem. Don\u0026rsquo;t worry if you are not - you should be able to follow.\nThe case $N = 1$ The only two choices for $X$ are $0$ and $1$ and the process terminates as soon as we get a $1$. This is visualised as tossing a coin and waiting until the first heads. The number of steps follows a geometric distribution with $p = \\frac{1}{2}$ (again, fret not if you don\u0026rsquo;t know what that means). It is worth mentioning how to calculate the expected value even though it is covered in the samples. Let $e$ denote the expected number of tosses until we meet our first $1$. On our first step, we either obtain a $1$ with probability $\\frac{1}{2}$ or we have to \u0026ldquo;reset\u0026rdquo; the process with probability $\\frac{1}{2}$. Thus, the equation is $e = \\frac{1}{2} \\cdot 1 + \\frac{1}{2} \\cdot (1 + e)$ which yields $e = 2$.\nUnderstanding the general case The general case is visualised as follows: do the above experiment with $N$ separate coins. What is the expected value of the maximum number of trials among them? Formally, we have $N$ iid random variables $X_1, \\cdots, X_N$ all following the geometric distribution with $p = \\frac{1}{2}$. What is the value of $E[Y]$ where $Y = \\max X_i$?\nWe know by the definition of expected value that $E[Y] = \\sum_{i \\ge 1} i\\cdot P(Y = i)$. But this can also be seen as $E[Y] = \\sum_{i \\ge 1} P(Y \\ge i)$. Why? Try writing $P(Y \\ge i)$ as $P(Y = i) + P(Y = i + 1) + \\cdots$ and check that this becomes the original definition. And so, since the $N$ variables are independent,\n$$E[Y] = \\sum_{i \\ge 1} 1 - P(Y \u0026lt; i) = \\sum_{i \\ge 1} 1 - P(X_1 \u0026lt; i) \\cdots P(X_N \u0026lt; i)$$\nThe probability $P(X_1 \u0026lt; i)$ is $1 - P(X_1 \\ge i)$. Note that $P(X_1 \\ge i)$ means that you want the first $i - 1$ tosses to appear as tails the probability of which is $\\frac{1}{2^{i - 1}}$. The same goes for $X_2$ through $X_N$ as they are identically distributed. Thus,\n$$E[Y] = \\sum_{i \\ge 1} 1 - \\left(1 - \\frac{1}{2^{i-1}}\\right)^{N}$$\nAs a sanity check, try substituting $N = 1$ and see that it matches the expected value (pun not intended).\nFor brevity, we change the indexing to 0-based and denote $p = \\frac{1}{2}$. We need to calculate $\\sum_{i\\ge 0} 1 - (1 - p^i)^N$ where $N$ is fixed.\nFinishing it off Using binomial theorem, the series is\n$$S = \\sum_{i \\ge 0}\\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} p^{ij}$$\nHere is the kicker: switch indexing.\n$$S = \\sum_{j = 1}^{N} \\sum_{i \\ge 0} \\binom{N}{j} (-1)^{N - j} p^{ij} = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\sum_{i \\ge 0} p^{ij}$$\nOf course, we know that the inner summation is merely the geometric series and so we can finish with the result (where $p$ still denotes $\\frac{1}{2}$).\n$$S = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\frac{1}{1 - p^j}$$\nThe problem is thus solved in complexity $O(N \\log(10^9 + 7))$.\nThe computation of binomial coefficients modulo a large prime is a fairly common idea in competitive programming: compute in advance the arrays $\\rm factorial[0..N]$ and $\\rm inverse\\_factorial[0..N]$ where computations are carried out modulo the prime $10^9 + 7$, that is, $\\rm inverse\\_factorial[i] \\cdot factorial[i] \\equiv 1 \\pmod {10^9 + 7}$. Computing inverses/reciprocals is done using Fermat\u0026rsquo;s theorem.\n","permalink":"http://localhost:1313/posts/2022-02-05-random-or/","summary":"\u003cp\u003eToday I\u0026rsquo;ll discuss a \u003ca href=\"https://www.codechef.com/FEB221A/problems/RANDOMOR\"\u003eprobability problem from CodeChef\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\u003c/p\u003e","title":"Random OR"},{"content":"Let\u0026rsquo;s look at this math problem from the recent AIsing Programming Contest 2020 on AtCoder.\nThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\nTo begin, it\u0026rsquo;s a good idea to cast the differences in the target expression as separate variables. Let\u0026rsquo;s rename $a_1$ as $a$ and $a_2$ as $a + a\u0026rsquo;$, so that $a\u0026rsquo; = a_2 - a_1$. It\u0026rsquo;s also a good idea to add a dummy $f \\ge 0$ to $(2)$ to the left side so that it becomes an equation. Under this renaming, things become slightly simpler. We\u0026rsquo;re now asked to evaluate the sum of \\[\\tag{1*} a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d\u0026rsquo; e\u0026rsquo;\\]for all tuples such that\\[\\tag{2*} 2(a + b + \\cdots + e) + (a\u0026rsquo; + b\u0026rsquo; + \\cdots + e\u0026rsquo;) + f = N \\]where\\[\\tag{3*} \\begin{cases}a, b, \\cdots, e, f \\ge 0 \\\\ a\u0026rsquo;, b\u0026rsquo;, c\u0026rsquo;, d\u0026rsquo;, e\u0026rsquo; \u0026gt; 0\\end{cases}\\]While the target expression $(1*)$ is simpler, we need to find out what to do about $(2*)$. Another greatly used tool in combinatorics is casting these problems in terms of generating functions and obtaining the solution by manipulating the power series.\nA few words on generating functions Consider multiplying two polynomials $f$ and $g$. Question: what exactly does the coefficient of $x^i$ denote? Described purely in words, it is the sum of product of coefficients in any two terms, one from $f$, and one from $g$, so that the sum of degrees of the terms is $i$. We can look at this for more than two polynomials: we pick one term each from every participating polynomial in the product, we find the sum of the degrees, and add the product of these coefficients to that term. We may think of the coefficients, then, as a form of weight for a term.\nThe technique we\u0026rsquo;re about to employ takes advantage of precisely this. We multiply many series, where each individual series corresponds to a variable. The exponents denote possible values for the variable, and a coefficient intuitively describes the weight in that term. Then the coefficients of the product are the sum of products of these weights.\nSolution We need to derive a generating function from $(2*)$. We\u0026rsquo;re adding up to $N$ using $11$ non-negative integers, where the first five of them are even (this is because of the coefficient $2$), and the next five of them are strictly positive. We also need to weigh the series that correspond to $a\u0026rsquo;, b\u0026rsquo;, \\cdots, e\u0026rsquo;$ so that we get the sum of $a\u0026rsquo;b\u0026rsquo;c\u0026rsquo;d\u0026rsquo;e\u0026rsquo;$ in the resulting product. This can be done by making the coefficient equal to the exponent (so that if $x^i$ is picked, it contributes $i$ to the product). So we obtain the following representation:\\[F(x) = (1 + x^2 + x^4 + \\cdots)^5 (1x + 2x^2 + 3x^3 + \\cdots )^5 (1 + x + x^2 + \\cdots)\\]and we need to find the coefficient of $x^N$ in $F(x)$ to obtain the answer. The first boss move in moving to the solution is noticing\\[x + 2x^2 + 3x^3 + \\cdots = x(1 + x + x^2 + \\cdots)^2\\]so that\\[F(x) = x^5 (1 + x^2 + x^4 + \\cdots)^5(1 + x + x^2 + \\cdots)^{11}\\]We should also remove the stupid $x^5$ because it\u0026rsquo;s of no use to us, and we can calculate the coefficient of $x^{N-5}$ in\\[F_2(x) = (1 + x^2 + x^4 + \\cdots)^5(1+x+x^2 + \\cdots)^{11}\\]We\u0026rsquo;ve hit the crux of the problem: what do we do with this? Life would have been much simpler if we had only a single type of exponentiated. Why? Because we have a closed form\\[\\tag{*} (1 + x + x^2 + \\cdots)^n = \\sum_{k = 0}^{\\infty} \\binom{n + k - 1}{k - 1} x^k\\]This is stars-and-bars in terms of generating functions.\nWithout further ado, here\u0026rsquo;s the big trick:\\[1 + x + x^2 + \\cdots = (1 + x)(1 + x^2 + x^4 + \\cdots)\\]And so\\[F_2(x) = (1+x)^{11} (1+x^2+x^4+\\cdots)^{16}\\]The first part $(1 + x)^{11}$ can be expanded using the binomial theorem, and the second part can be expanded using $(*)$. To evaluate the coefficient of $x^{N-5}$, we loop on the term from the binomial expansion, (say, the $x^i$ term) and multiply its coefficient by the coefficient of $x^{N-5-i}$ in the in the expansion of $(1 + x^2 + x^4 + \\cdots)^{16}$. And we\u0026rsquo;re done!\nA tiny implementation detail: To compute a binomial coefficient $\\binom{p}{q}$ with large $p$ and small $q$, it\u0026rsquo;s better to use the following:\\[\\binom{p}{q} = \\frac{p(p-1)\\cdots(p-q+1)}{q!}\\]Most problems involve precomputing factorials and their inverses, but this is not one of them.\n","permalink":"http://localhost:1313/posts/2020-08-03-generating-functions/","summary":"\u003cp\u003eLet\u0026rsquo;s look at this math problem from the recent \u003ca href=\"https://atcoder.jp/contests/aising2020/tasks/aising2020_f\"\u003eAIsing Programming Contest 2020 on AtCoder.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\u003c/p\u003e","title":"Generating Functions"},{"content":"Today we take a look at the problem ABC241 H.\nWe are given $N \\le 16$ distinct numbers $A_1, \\cdots, A_N$ and a sequence describing the amount of supply of each number: a sequence $B_1, \\cdots, B_N$ where $B_i$ refers to the supply of the number $A_i$. The score of a combination of $M$ chosen numbers is the product of the numbers. That is, suppose we pick $C_i$ occurences of the $A_i$ where $0 \\le C_i \\le B_i$ and $\\sum C_i = M$, then $\\text{score}(C) = \\prod_{i = 1}^{N} A_i^{C_i}$. The objective is to find the sum of scores over all possible valid combinations.\nThis statement might sound convoluted, but its intent is very clearly and naturally expressed in the language of generating functions. Observe that it translates to finding the coefficient of $x^M$ in the following:\n$$F(x) = \\prod_{i=1}^{N} \\sum_{j = 0}^{B_i} (A_j x)^j$$\nHere, the index $j$ represents the number of picked $A_i$\u0026rsquo;s. The sum of powers of $x$ should be $M$, and so our generating function would conveniently pick every valid combination of summing up to $M$ and collect the score for each such combination. Let\u0026rsquo;s now use the following identity:\n$$\\sum_{i=0}^{n} y^i = \\frac{1 - y^{n + 1}}{1 - y}$$\nAnd we get the following product:\n$$F(x) = \\prod_{i = 1}^{N} \\frac {1 - (A_i x)^{B_i+1}}{1 - A_i x}$$\nRemember that we are still only looking for the coefficient of $x^M$. The $B_i$\u0026rsquo;s are sort of annoying, so let\u0026rsquo;s turn our attention to a simpler problem: what if we have infinite supplies of each? In that case, we need the coefficient of $x^M$ in\n$$G(x) = \\prod_{i=1}^{N} \\frac{1}{1 - A_i x}$$\nWhich looks awfully familiar - oh wait, this can be decomposed using partial fractions! So let\u0026rsquo;s do it:\n$$G(x) = \\prod_{i = 1}^{N} \\frac{1}{1 - A_i x} = \\sum_{i = 1}^{N}\\frac{c_i}{1 - A_i x}$$\nA gentle reminder that it\u0026rsquo;s very easy to compute the decomposition when the denominator is conveniently split into a simple product of linear factors - it\u0026rsquo;s a matter of multiplying the product $\\prod_{i=1}^{N} (1 - A_i x)$ and for each $i$, plugging in $x = \\frac{1}{A_i}$, turning all except the term involving $c_i$ equal to $0$. This is naively done in $O(N^2)$ which is good enough given the unusually low constraint for $N$. To find the coefficient of $x^M$, we just expand $\\frac{1}{1 - A_i x}$ and see that it is doable in $O(N\\log_2{M})$ with binary exponentiation.\n$$G(x) = \\sum_{i=1}^{N} \\sum_{j=0}^{\\infty} c_i A_i^j x^j \\implies [x^M]G(x) = \\sum_{i=1}^{N} c_i A_i^{M} $$\nThere\u0026rsquo;s actually not much to be done at this point. Notice that\n$$F(x) = G(x) \\prod_{i=1}^{N} (1 - (A_i x)^{B_i + 1})$$\nThe product is interesting. For the $i$-th factor, we are making a choice: pick one of the two terms $1$ and $-(A_i x)^{B_i + 1}$. All $N$ choices are independent over every $i$ and so we have $2^N$ ways. We can look at every such way independently and add up the resulting coefficients of $x^M$ to obtain the answer. For example, one of these ways is choosing $1$ in every factor. In fact, this series of choices yields $G(x)$, so finding the coefficient of $x^M$ is exactly what we did above.\nThe other cases are not very different. Suppose the sum of the picked powers of $x$ in our $N$ choices is $s$ and the collected coefficient is $p$ (for example, $s = 0$ and $p = 1$ when we pick all $1$s). Then we need to find the coefficient of $x^{M - s}$ in $G(x)$ and multiply it by $p$ to give us one of the terms in the sum that involves $2^N$ terms. Of course, the coefficient of $x^{M - s}$ can be found in the same way as that of $x^M$. This gives us an $O(N^2 + 2^N \\cdot N \\cdot \\log_2 M)$ solution.\nIt is interesting to note that what we have done here is simply the inclusion-exclusion principle. We noticed that the answer is easily computable in the unrestricted case (call it $g(s)$ where $s$ is the sum of chosen numbers) and we want to compute it for the restricted case, call it $f(s)$. Then we look at the answer when some set of indices $S \\subseteq \\{ 1, \\cdots, n \\}$ violates its constraint, i.e., for every $i \\in S$, $C_i \\ge B_i + 1$ which is the same as an unrestricted $C_i\u0026rsquo; = C_i - (B_i + 1) \\ge 0$ (except the score is scaled up by $A_i^{B_i + 1}$ to account for the offset) and so the expression looks like $$ f(M) = \\sum_{S} (-1)^{ \\mid S \\mid } \\left(\\prod_{i \\in S} A_i^{B_i + 1}\\right)g\\left(M - \\sum_{i\\in S} (B_i + 1)\\right)$$. This is identical to what we obtained using generating functions.\n","permalink":"http://localhost:1313/posts/2022-02-28-generating-functions-2/","summary":"\u003cp\u003eToday we take a look at the problem \u003ca href=\"https://atcoder.jp/contests/abc241/tasks/abc241_h\"\u003eABC241 H\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe are given $N \\le 16$ distinct numbers $A_1, \\cdots, A_N$ and a sequence describing the amount of supply of each number: a sequence $B_1, \\cdots, B_N$ where $B_i$ refers to the supply of the number $A_i$. The score of a combination of $M$ chosen numbers is the product of the numbers. That is, suppose we pick $C_i$ occurences of the $A_i$ where $0 \\le C_i \\le B_i$ and $\\sum C_i = M$, then $\\text{score}(C) = \\prod_{i = 1}^{N} A_i^{C_i}$. The objective is to find the sum of scores over all possible valid combinations.\u003c/p\u003e","title":"More Generating Functions"},{"content":"Today I\u0026rsquo;ll discuss a probability problem from CodeChef.\nThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\nIf you are familiar with statistical distributions, you should immediately see the goal of this problem. Don\u0026rsquo;t worry if you are not - you should be able to follow.\nThe case $N = 1$ The only two choices for $X$ are $0$ and $1$ and the process terminates as soon as we get a $1$. This is visualised as tossing a coin and waiting until the first heads. The number of steps follows a geometric distribution with $p = \\frac{1}{2}$ (again, fret not if you don\u0026rsquo;t know what that means). It is worth mentioning how to calculate the expected value even though it is covered in the samples. Let $e$ denote the expected number of tosses until we meet our first $1$. On our first step, we either obtain a $1$ with probability $\\frac{1}{2}$ or we have to \u0026ldquo;reset\u0026rdquo; the process with probability $\\frac{1}{2}$. Thus, the equation is $e = \\frac{1}{2} \\cdot 1 + \\frac{1}{2} \\cdot (1 + e)$ which yields $e = 2$.\nUnderstanding the general case The general case is visualised as follows: do the above experiment with $N$ separate coins. What is the expected value of the maximum number of trials among them? Formally, we have $N$ iid random variables $X_1, \\cdots, X_N$ all following the geometric distribution with $p = \\frac{1}{2}$. What is the value of $E[Y]$ where $Y = \\max X_i$?\nWe know by the definition of expected value that $E[Y] = \\sum_{i \\ge 1} i\\cdot P(Y = i)$. But this can also be seen as $E[Y] = \\sum_{i \\ge 1} P(Y \\ge i)$. Why? Try writing $P(Y \\ge i)$ as $P(Y = i) + P(Y = i + 1) + \\cdots$ and check that this becomes the original definition. And so, since the $N$ variables are independent,\n$$E[Y] = \\sum_{i \\ge 1} 1 - P(Y \u0026lt; i) = \\sum_{i \\ge 1} 1 - P(X_1 \u0026lt; i) \\cdots P(X_N \u0026lt; i)$$\nThe probability $P(X_1 \u0026lt; i)$ is $1 - P(X_1 \\ge i)$. Note that $P(X_1 \\ge i)$ means that you want the first $i - 1$ tosses to appear as tails the probability of which is $\\frac{1}{2^{i - 1}}$. The same goes for $X_2$ through $X_N$ as they are identically distributed. Thus,\n$$E[Y] = \\sum_{i \\ge 1} 1 - \\left(1 - \\frac{1}{2^{i-1}}\\right)^{N}$$\nAs a sanity check, try substituting $N = 1$ and see that it matches the expected value (pun not intended).\nFor brevity, we change the indexing to 0-based and denote $p = \\frac{1}{2}$. We need to calculate $\\sum_{i\\ge 0} 1 - (1 - p^i)^N$ where $N$ is fixed.\nFinishing it off Using binomial theorem, the series is\n$$S = \\sum_{i \\ge 0}\\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} p^{ij}$$\nHere is the kicker: switch indexing.\n$$S = \\sum_{j = 1}^{N} \\sum_{i \\ge 0} \\binom{N}{j} (-1)^{N - j} p^{ij} = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\sum_{i \\ge 0} p^{ij}$$\nOf course, we know that the inner summation is merely the geometric series and so we can finish with the result (where $p$ still denotes $\\frac{1}{2}$).\n$$S = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\frac{1}{1 - p^j}$$\nThe problem is thus solved in complexity $O(N \\log(10^9 + 7))$.\nThe computation of binomial coefficients modulo a large prime is a fairly common idea in competitive programming: compute in advance the arrays $\\rm factorial[0..N]$ and $\\rm inverse\\_factorial[0..N]$ where computations are carried out modulo the prime $10^9 + 7$, that is, $\\rm inverse\\_factorial[i] \\cdot factorial[i] \\equiv 1 \\pmod {10^9 + 7}$. Computing inverses/reciprocals is done using Fermat\u0026rsquo;s theorem.\n","permalink":"http://localhost:1313/posts/2022-02-05-random-or/","summary":"\u003cp\u003eToday I\u0026rsquo;ll discuss a \u003ca href=\"https://www.codechef.com/FEB221A/problems/RANDOMOR\"\u003eprobability problem from CodeChef\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\u003c/p\u003e","title":"Random OR"},{"content":"Let\u0026rsquo;s look at this math problem from the recent AIsing Programming Contest 2020 on AtCoder.\nThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\nTo begin, it\u0026rsquo;s a good idea to cast the differences in the target expression as separate variables. Let\u0026rsquo;s rename $a_1$ as $a$ and $a_2$ as $a + a\u0026rsquo;$, so that $a\u0026rsquo; = a_2 - a_1$. It\u0026rsquo;s also a good idea to add a dummy $f \\ge 0$ to $(2)$ to the left side so that it becomes an equation. Under this renaming, things become slightly simpler. We\u0026rsquo;re now asked to evaluate the sum of \\[\\tag{1*} a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d\u0026rsquo; e\u0026rsquo;\\]for all tuples such that\\[\\tag{2*} 2(a + b + \\cdots + e) + (a\u0026rsquo; + b\u0026rsquo; + \\cdots + e\u0026rsquo;) + f = N \\]where\\[\\tag{3*} \\begin{cases}a, b, \\cdots, e, f \\ge 0 \\\\ a\u0026rsquo;, b\u0026rsquo;, c\u0026rsquo;, d\u0026rsquo;, e\u0026rsquo; \u0026gt; 0\\end{cases}\\]While the target expression $(1*)$ is simpler, we need to find out what to do about $(2*)$. Another greatly used tool in combinatorics is casting these problems in terms of generating functions and obtaining the solution by manipulating the power series.\nA few words on generating functions Consider multiplying two polynomials $f$ and $g$. Question: what exactly does the coefficient of $x^i$ denote? Described purely in words, it is the sum of product of coefficients in any two terms, one from $f$, and one from $g$, so that the sum of degrees of the terms is $i$. We can look at this for more than two polynomials: we pick one term each from every participating polynomial in the product, we find the sum of the degrees, and add the product of these coefficients to that term. We may think of the coefficients, then, as a form of weight for a term.\nThe technique we\u0026rsquo;re about to employ takes advantage of precisely this. We multiply many series, where each individual series corresponds to a variable. The exponents denote possible values for the variable, and a coefficient intuitively describes the weight in that term. Then the coefficients of the product are the sum of products of these weights.\nSolution We need to derive a generating function from $(2*)$. We\u0026rsquo;re adding up to $N$ using $11$ non-negative integers, where the first five of them are even (this is because of the coefficient $2$), and the next five of them are strictly positive. We also need to weigh the series that correspond to $a\u0026rsquo;, b\u0026rsquo;, \\cdots, e\u0026rsquo;$ so that we get the sum of $a\u0026rsquo;b\u0026rsquo;c\u0026rsquo;d\u0026rsquo;e\u0026rsquo;$ in the resulting product. This can be done by making the coefficient equal to the exponent (so that if $x^i$ is picked, it contributes $i$ to the product). So we obtain the following representation:\\[F(x) = (1 + x^2 + x^4 + \\cdots)^5 (1x + 2x^2 + 3x^3 + \\cdots )^5 (1 + x + x^2 + \\cdots)\\]and we need to find the coefficient of $x^N$ in $F(x)$ to obtain the answer. The first boss move in moving to the solution is noticing\\[x + 2x^2 + 3x^3 + \\cdots = x(1 + x + x^2 + \\cdots)^2\\]so that\\[F(x) = x^5 (1 + x^2 + x^4 + \\cdots)^5(1 + x + x^2 + \\cdots)^{11}\\]We should also remove the stupid $x^5$ because it\u0026rsquo;s of no use to us, and we can calculate the coefficient of $x^{N-5}$ in\\[F_2(x) = (1 + x^2 + x^4 + \\cdots)^5(1+x+x^2 + \\cdots)^{11}\\]We\u0026rsquo;ve hit the crux of the problem: what do we do with this? Life would have been much simpler if we had only a single type of exponentiated. Why? Because we have a closed form\\[\\tag{*} (1 + x + x^2 + \\cdots)^n = \\sum_{k = 0}^{\\infty} \\binom{n + k - 1}{k - 1} x^k\\]This is stars-and-bars in terms of generating functions.\nWithout further ado, here\u0026rsquo;s the big trick:\\[1 + x + x^2 + \\cdots = (1 + x)(1 + x^2 + x^4 + \\cdots)\\]And so\\[F_2(x) = (1+x)^{11} (1+x^2+x^4+\\cdots)^{16}\\]The first part $(1 + x)^{11}$ can be expanded using the binomial theorem, and the second part can be expanded using $(*)$. To evaluate the coefficient of $x^{N-5}$, we loop on the term from the binomial expansion, (say, the $x^i$ term) and multiply its coefficient by the coefficient of $x^{N-5-i}$ in the in the expansion of $(1 + x^2 + x^4 + \\cdots)^{16}$. And we\u0026rsquo;re done!\nA tiny implementation detail: To compute a binomial coefficient $\\binom{p}{q}$ with large $p$ and small $q$, it\u0026rsquo;s better to use the following:\\[\\binom{p}{q} = \\frac{p(p-1)\\cdots(p-q+1)}{q!}\\]Most problems involve precomputing factorials and their inverses, but this is not one of them.\n","permalink":"http://localhost:1313/posts/2020-08-03-generating-functions/","summary":"\u003cp\u003eLet\u0026rsquo;s look at this math problem from the recent \u003ca href=\"https://atcoder.jp/contests/aising2020/tasks/aising2020_f\"\u003eAIsing Programming Contest 2020 on AtCoder.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\u003c/p\u003e","title":"Generating Functions"},{"content":"Today we take a look at the problem ABC241 H.\nWe are given $N \\le 16$ distinct numbers $A_1, \\cdots, A_N$ and a sequence describing the amount of supply of each number: a sequence $B_1, \\cdots, B_N$ where $B_i$ refers to the supply of the number $A_i$. The score of a combination of $M$ chosen numbers is the product of the numbers. That is, suppose we pick $C_i$ occurences of the $A_i$ where $0 \\le C_i \\le B_i$ and $\\sum C_i = M$, then $\\text{score}(C) = \\prod_{i = 1}^{N} A_i^{C_i}$. The objective is to find the sum of scores over all possible valid combinations.\nThis statement might sound convoluted, but its intent is very clearly and naturally expressed in the language of generating functions. Observe that it translates to finding the coefficient of $x^M$ in the following:\n$$F(x) = \\prod_{i=1}^{N} \\sum_{j = 0}^{B_i} (A_j x)^j$$\nHere, the index $j$ represents the number of picked $A_i$\u0026rsquo;s. The sum of powers of $x$ should be $M$, and so our generating function would conveniently pick every valid combination of summing up to $M$ and collect the score for each such combination. Let\u0026rsquo;s now use the following identity:\n$$\\sum_{i=0}^{n} y^i = \\frac{1 - y^{n + 1}}{1 - y}$$\nAnd we get the following product:\n$$F(x) = \\prod_{i = 1}^{N} \\frac {1 - (A_i x)^{B_i+1}}{1 - A_i x}$$\nRemember that we are still only looking for the coefficient of $x^M$. The $B_i$\u0026rsquo;s are sort of annoying, so let\u0026rsquo;s turn our attention to a simpler problem: what if we have infinite supplies of each? In that case, we need the coefficient of $x^M$ in\n$$G(x) = \\prod_{i=1}^{N} \\frac{1}{1 - A_i x}$$\nWhich looks awfully familiar - oh wait, this can be decomposed using partial fractions! So let\u0026rsquo;s do it:\n$$G(x) = \\prod_{i = 1}^{N} \\frac{1}{1 - A_i x} = \\sum_{i = 1}^{N}\\frac{c_i}{1 - A_i x}$$\nA gentle reminder that it\u0026rsquo;s very easy to compute the decomposition when the denominator is conveniently split into a simple product of linear factors - it\u0026rsquo;s a matter of multiplying the product $\\prod_{i=1}^{N} (1 - A_i x)$ and for each $i$, plugging in $x = \\frac{1}{A_i}$, turning all except the term involving $c_i$ equal to $0$. This is naively done in $O(N^2)$ which is good enough given the unusually low constraint for $N$. To find the coefficient of $x^M$, we just expand $\\frac{1}{1 - A_i x}$ and see that it is doable in $O(N\\log_2{M})$ with binary exponentiation.\n$$G(x) = \\sum_{i=1}^{N} \\sum_{j=0}^{\\infty} c_i A_i^j x^j \\implies [x^M]G(x) = \\sum_{i=1}^{N} c_i A_i^{M} $$\nThere\u0026rsquo;s actually not much to be done at this point. Notice that\n$$F(x) = G(x) \\prod_{i=1}^{N} (1 - (A_i x)^{B_i + 1})$$\nThe product is interesting. For the $i$-th factor, we are making a choice: pick one of the two terms $1$ and $-(A_i x)^{B_i + 1}$. All $N$ choices are independent over every $i$ and so we have $2^N$ ways. We can look at every such way independently and add up the resulting coefficients of $x^M$ to obtain the answer. For example, one of these ways is choosing $1$ in every factor. In fact, this series of choices yields $G(x)$, so finding the coefficient of $x^M$ is exactly what we did above.\nThe other cases are not very different. Suppose the sum of the picked powers of $x$ in our $N$ choices is $s$ and the collected coefficient is $p$ (for example, $s = 0$ and $p = 1$ when we pick all $1$s). Then we need to find the coefficient of $x^{M - s}$ in $G(x)$ and multiply it by $p$ to give us one of the terms in the sum that involves $2^N$ terms. Of course, the coefficient of $x^{M - s}$ can be found in the same way as that of $x^M$. This gives us an $O(N^2 + 2^N \\cdot N \\cdot \\log_2 M)$ solution.\nIt is interesting to note that what we have done here is simply the inclusion-exclusion principle. We noticed that the answer is easily computable in the unrestricted case (call it $g(s)$ where $s$ is the sum of chosen numbers) and we want to compute it for the restricted case, call it $f(s)$. Then we look at the answer when some set of indices $S \\subseteq \\{ 1, \\cdots, n \\}$ violates its constraint, i.e., for every $i \\in S$, $C_i \\ge B_i + 1$ which is the same as an unrestricted $C_i\u0026rsquo; = C_i - (B_i + 1) \\ge 0$ (except the score is scaled up by $A_i^{B_i + 1}$ to account for the offset) and so the expression looks like $$ f(M) = \\sum_{S} (-1)^{ \\mid S \\mid } \\left(\\prod_{i \\in S} A_i^{B_i + 1}\\right)g\\left(M - \\sum_{i\\in S} (B_i + 1)\\right)$$. This is identical to what we obtained using generating functions.\n","permalink":"http://localhost:1313/posts/2022-02-28-generating-functions-2/","summary":"\u003cp\u003eToday we take a look at the problem \u003ca href=\"https://atcoder.jp/contests/abc241/tasks/abc241_h\"\u003eABC241 H\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe are given $N \\le 16$ distinct numbers $A_1, \\cdots, A_N$ and a sequence describing the amount of supply of each number: a sequence $B_1, \\cdots, B_N$ where $B_i$ refers to the supply of the number $A_i$. The score of a combination of $M$ chosen numbers is the product of the numbers. That is, suppose we pick $C_i$ occurences of the $A_i$ where $0 \\le C_i \\le B_i$ and $\\sum C_i = M$, then $\\text{score}(C) = \\prod_{i = 1}^{N} A_i^{C_i}$. The objective is to find the sum of scores over all possible valid combinations.\u003c/p\u003e","title":"More Generating Functions"},{"content":"Today I\u0026rsquo;ll discuss a probability problem from CodeChef.\nThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\nIf you are familiar with statistical distributions, you should immediately see the goal of this problem. Don\u0026rsquo;t worry if you are not - you should be able to follow.\nThe case $N = 1$ The only two choices for $X$ are $0$ and $1$ and the process terminates as soon as we get a $1$. This is visualised as tossing a coin and waiting until the first heads. The number of steps follows a geometric distribution with $p = \\frac{1}{2}$ (again, fret not if you don\u0026rsquo;t know what that means). It is worth mentioning how to calculate the expected value even though it is covered in the samples. Let $e$ denote the expected number of tosses until we meet our first $1$. On our first step, we either obtain a $1$ with probability $\\frac{1}{2}$ or we have to \u0026ldquo;reset\u0026rdquo; the process with probability $\\frac{1}{2}$. Thus, the equation is $e = \\frac{1}{2} \\cdot 1 + \\frac{1}{2} \\cdot (1 + e)$ which yields $e = 2$.\nUnderstanding the general case The general case is visualised as follows: do the above experiment with $N$ separate coins. What is the expected value of the maximum number of trials among them? Formally, we have $N$ iid random variables $X_1, \\cdots, X_N$ all following the geometric distribution with $p = \\frac{1}{2}$. What is the value of $E[Y]$ where $Y = \\max X_i$?\nWe know by the definition of expected value that $E[Y] = \\sum_{i \\ge 1} i\\cdot P(Y = i)$. But this can also be seen as $E[Y] = \\sum_{i \\ge 1} P(Y \\ge i)$. Why? Try writing $P(Y \\ge i)$ as $P(Y = i) + P(Y = i + 1) + \\cdots$ and check that this becomes the original definition. And so, since the $N$ variables are independent,\n$$E[Y] = \\sum_{i \\ge 1} 1 - P(Y \u0026lt; i) = \\sum_{i \\ge 1} 1 - P(X_1 \u0026lt; i) \\cdots P(X_N \u0026lt; i)$$\nThe probability $P(X_1 \u0026lt; i)$ is $1 - P(X_1 \\ge i)$. Note that $P(X_1 \\ge i)$ means that you want the first $i - 1$ tosses to appear as tails the probability of which is $\\frac{1}{2^{i - 1}}$. The same goes for $X_2$ through $X_N$ as they are identically distributed. Thus,\n$$E[Y] = \\sum_{i \\ge 1} 1 - \\left(1 - \\frac{1}{2^{i-1}}\\right)^{N}$$\nAs a sanity check, try substituting $N = 1$ and see that it matches the expected value (pun not intended).\nFor brevity, we change the indexing to 0-based and denote $p = \\frac{1}{2}$. We need to calculate $\\sum_{i\\ge 0} 1 - (1 - p^i)^N$ where $N$ is fixed.\nFinishing it off Using binomial theorem, the series is\n$$S = \\sum_{i \\ge 0}\\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} p^{ij}$$\nHere is the kicker: switch indexing.\n$$S = \\sum_{j = 1}^{N} \\sum_{i \\ge 0} \\binom{N}{j} (-1)^{N - j} p^{ij} = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\sum_{i \\ge 0} p^{ij}$$\nOf course, we know that the inner summation is merely the geometric series and so we can finish with the result (where $p$ still denotes $\\frac{1}{2}$).\n$$S = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\frac{1}{1 - p^j}$$\nThe problem is thus solved in complexity $O(N \\log(10^9 + 7))$.\nThe computation of binomial coefficients modulo a large prime is a fairly common idea in competitive programming: compute in advance the arrays $\\rm factorial[0..N]$ and $\\rm inverse\\_factorial[0..N]$ where computations are carried out modulo the prime $10^9 + 7$, that is, $\\rm inverse\\_factorial[i] \\cdot factorial[i] \\equiv 1 \\pmod {10^9 + 7}$. Computing inverses/reciprocals is done using Fermat\u0026rsquo;s theorem.\n","permalink":"http://localhost:1313/posts/2022-02-05-random-or/","summary":"\u003cp\u003eToday I\u0026rsquo;ll discuss a \u003ca href=\"https://www.codechef.com/FEB221A/problems/RANDOMOR\"\u003eprobability problem from CodeChef\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\u003c/p\u003e","title":"Random OR"},{"content":"Let\u0026rsquo;s look at this math problem from the recent AIsing Programming Contest 2020 on AtCoder.\nThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\nTo begin, it\u0026rsquo;s a good idea to cast the differences in the target expression as separate variables. Let\u0026rsquo;s rename $a_1$ as $a$ and $a_2$ as $a + a\u0026rsquo;$, so that $a\u0026rsquo; = a_2 - a_1$. It\u0026rsquo;s also a good idea to add a dummy $f \\ge 0$ to $(2)$ to the left side so that it becomes an equation. Under this renaming, things become slightly simpler. We\u0026rsquo;re now asked to evaluate the sum of \\[\\tag{1*} a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d\u0026rsquo; e\u0026rsquo;\\]for all tuples such that\\[\\tag{2*} 2(a + b + \\cdots + e) + (a\u0026rsquo; + b\u0026rsquo; + \\cdots + e\u0026rsquo;) + f = N \\]where\\[\\tag{3*} \\begin{cases}a, b, \\cdots, e, f \\ge 0 \\\\ a\u0026rsquo;, b\u0026rsquo;, c\u0026rsquo;, d\u0026rsquo;, e\u0026rsquo; \u0026gt; 0\\end{cases}\\]While the target expression $(1*)$ is simpler, we need to find out what to do about $(2*)$. Another greatly used tool in combinatorics is casting these problems in terms of generating functions and obtaining the solution by manipulating the power series.\nA few words on generating functions Consider multiplying two polynomials $f$ and $g$. Question: what exactly does the coefficient of $x^i$ denote? Described purely in words, it is the sum of product of coefficients in any two terms, one from $f$, and one from $g$, so that the sum of degrees of the terms is $i$. We can look at this for more than two polynomials: we pick one term each from every participating polynomial in the product, we find the sum of the degrees, and add the product of these coefficients to that term. We may think of the coefficients, then, as a form of weight for a term.\nThe technique we\u0026rsquo;re about to employ takes advantage of precisely this. We multiply many series, where each individual series corresponds to a variable. The exponents denote possible values for the variable, and a coefficient intuitively describes the weight in that term. Then the coefficients of the product are the sum of products of these weights.\nSolution We need to derive a generating function from $(2*)$. We\u0026rsquo;re adding up to $N$ using $11$ non-negative integers, where the first five of them are even (this is because of the coefficient $2$), and the next five of them are strictly positive. We also need to weigh the series that correspond to $a\u0026rsquo;, b\u0026rsquo;, \\cdots, e\u0026rsquo;$ so that we get the sum of $a\u0026rsquo;b\u0026rsquo;c\u0026rsquo;d\u0026rsquo;e\u0026rsquo;$ in the resulting product. This can be done by making the coefficient equal to the exponent (so that if $x^i$ is picked, it contributes $i$ to the product). So we obtain the following representation:\\[F(x) = (1 + x^2 + x^4 + \\cdots)^5 (1x + 2x^2 + 3x^3 + \\cdots )^5 (1 + x + x^2 + \\cdots)\\]and we need to find the coefficient of $x^N$ in $F(x)$ to obtain the answer. The first boss move in moving to the solution is noticing\\[x + 2x^2 + 3x^3 + \\cdots = x(1 + x + x^2 + \\cdots)^2\\]so that\\[F(x) = x^5 (1 + x^2 + x^4 + \\cdots)^5(1 + x + x^2 + \\cdots)^{11}\\]We should also remove the stupid $x^5$ because it\u0026rsquo;s of no use to us, and we can calculate the coefficient of $x^{N-5}$ in\\[F_2(x) = (1 + x^2 + x^4 + \\cdots)^5(1+x+x^2 + \\cdots)^{11}\\]We\u0026rsquo;ve hit the crux of the problem: what do we do with this? Life would have been much simpler if we had only a single type of exponentiated. Why? Because we have a closed form\\[\\tag{*} (1 + x + x^2 + \\cdots)^n = \\sum_{k = 0}^{\\infty} \\binom{n + k - 1}{k - 1} x^k\\]This is stars-and-bars in terms of generating functions.\nWithout further ado, here\u0026rsquo;s the big trick:\\[1 + x + x^2 + \\cdots = (1 + x)(1 + x^2 + x^4 + \\cdots)\\]And so\\[F_2(x) = (1+x)^{11} (1+x^2+x^4+\\cdots)^{16}\\]The first part $(1 + x)^{11}$ can be expanded using the binomial theorem, and the second part can be expanded using $(*)$. To evaluate the coefficient of $x^{N-5}$, we loop on the term from the binomial expansion, (say, the $x^i$ term) and multiply its coefficient by the coefficient of $x^{N-5-i}$ in the in the expansion of $(1 + x^2 + x^4 + \\cdots)^{16}$. And we\u0026rsquo;re done!\nA tiny implementation detail: To compute a binomial coefficient $\\binom{p}{q}$ with large $p$ and small $q$, it\u0026rsquo;s better to use the following:\\[\\binom{p}{q} = \\frac{p(p-1)\\cdots(p-q+1)}{q!}\\]Most problems involve precomputing factorials and their inverses, but this is not one of them.\n","permalink":"http://localhost:1313/posts/2020-08-03-generating-functions/","summary":"\u003cp\u003eLet\u0026rsquo;s look at this math problem from the recent \u003ca href=\"https://atcoder.jp/contests/aising2020/tasks/aising2020_f\"\u003eAIsing Programming Contest 2020 on AtCoder.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\u003c/p\u003e","title":"Generating Functions"},{"content":"Today we take a look at the problem ABC241 H.\nWe are given $N \\le 16$ distinct numbers $A_1, \\cdots, A_N$ and a sequence describing the amount of supply of each number: a sequence $B_1, \\cdots, B_N$ where $B_i$ refers to the supply of the number $A_i$. The score of a combination of $M$ chosen numbers is the product of the numbers. That is, suppose we pick $C_i$ occurences of the $A_i$ where $0 \\le C_i \\le B_i$ and $\\sum C_i = M$, then $\\text{score}(C) = \\prod_{i = 1}^{N} A_i^{C_i}$. The objective is to find the sum of scores over all possible valid combinations.\nThis statement might sound convoluted, but its intent is very clearly and naturally expressed in the language of generating functions. Observe that it translates to finding the coefficient of $x^M$ in the following:\n$$F(x) = \\prod_{i=1}^{N} \\sum_{j = 0}^{B_i} (A_j x)^j$$\nHere, the index $j$ represents the number of picked $A_i$\u0026rsquo;s. The sum of powers of $x$ should be $M$, and so our generating function would conveniently pick every valid combination of summing up to $M$ and collect the score for each such combination. Let\u0026rsquo;s now use the following identity:\n$$\\sum_{i=0}^{n} y^i = \\frac{1 - y^{n + 1}}{1 - y}$$\nAnd we get the following product:\n$$F(x) = \\prod_{i = 1}^{N} \\frac {1 - (A_i x)^{B_i+1}}{1 - A_i x}$$\nRemember that we are still only looking for the coefficient of $x^M$. The $B_i$\u0026rsquo;s are sort of annoying, so let\u0026rsquo;s turn our attention to a simpler problem: what if we have infinite supplies of each? In that case, we need the coefficient of $x^M$ in\n$$G(x) = \\prod_{i=1}^{N} \\frac{1}{1 - A_i x}$$\nWhich looks awfully familiar - oh wait, this can be decomposed using partial fractions! So let\u0026rsquo;s do it:\n$$G(x) = \\prod_{i = 1}^{N} \\frac{1}{1 - A_i x} = \\sum_{i = 1}^{N}\\frac{c_i}{1 - A_i x}$$\nA gentle reminder that it\u0026rsquo;s very easy to compute the decomposition when the denominator is conveniently split into a simple product of linear factors - it\u0026rsquo;s a matter of multiplying the product $\\prod_{i=1}^{N} (1 - A_i x)$ and for each $i$, plugging in $x = \\frac{1}{A_i}$, turning all except the term involving $c_i$ equal to $0$. This is naively done in $O(N^2)$ which is good enough given the unusually low constraint for $N$. To find the coefficient of $x^M$, we just expand $\\frac{1}{1 - A_i x}$ and see that it is doable in $O(N\\log_2{M})$ with binary exponentiation.\n$$G(x) = \\sum_{i=1}^{N} \\sum_{j=0}^{\\infty} c_i A_i^j x^j \\implies [x^M]G(x) = \\sum_{i=1}^{N} c_i A_i^{M} $$\nThere\u0026rsquo;s actually not much to be done at this point. Notice that\n$$F(x) = G(x) \\prod_{i=1}^{N} (1 - (A_i x)^{B_i + 1})$$\nThe product is interesting. For the $i$-th factor, we are making a choice: pick one of the two terms $1$ and $-(A_i x)^{B_i + 1}$. All $N$ choices are independent over every $i$ and so we have $2^N$ ways. We can look at every such way independently and add up the resulting coefficients of $x^M$ to obtain the answer. For example, one of these ways is choosing $1$ in every factor. In fact, this series of choices yields $G(x)$, so finding the coefficient of $x^M$ is exactly what we did above.\nThe other cases are not very different. Suppose the sum of the picked powers of $x$ in our $N$ choices is $s$ and the collected coefficient is $p$ (for example, $s = 0$ and $p = 1$ when we pick all $1$s). Then we need to find the coefficient of $x^{M - s}$ in $G(x)$ and multiply it by $p$ to give us one of the terms in the sum that involves $2^N$ terms. Of course, the coefficient of $x^{M - s}$ can be found in the same way as that of $x^M$. This gives us an $O(N^2 + 2^N \\cdot N \\cdot \\log_2 M)$ solution.\nIt is interesting to note that what we have done here is simply the inclusion-exclusion principle. We noticed that the answer is easily computable in the unrestricted case (call it $g(s)$ where $s$ is the sum of chosen numbers) and we want to compute it for the restricted case, call it $f(s)$. Then we look at the answer when some set of indices $S \\subseteq \\{ 1, \\cdots, n \\}$ violates its constraint, i.e., for every $i \\in S$, $C_i \\ge B_i + 1$ which is the same as an unrestricted $C_i\u0026rsquo; = C_i - (B_i + 1) \\ge 0$ (except the score is scaled up by $A_i^{B_i + 1}$ to account for the offset) and so the expression looks like $$ f(M) = \\sum_{S} (-1)^{ \\mid S \\mid } \\left(\\prod_{i \\in S} A_i^{B_i + 1}\\right)g\\left(M - \\sum_{i\\in S} (B_i + 1)\\right)$$. This is identical to what we obtained using generating functions.\n","permalink":"http://localhost:1313/posts/2022-02-28-generating-functions-2/","summary":"\u003cp\u003eToday we take a look at the problem \u003ca href=\"https://atcoder.jp/contests/abc241/tasks/abc241_h\"\u003eABC241 H\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe are given $N \\le 16$ distinct numbers $A_1, \\cdots, A_N$ and a sequence describing the amount of supply of each number: a sequence $B_1, \\cdots, B_N$ where $B_i$ refers to the supply of the number $A_i$. The score of a combination of $M$ chosen numbers is the product of the numbers. That is, suppose we pick $C_i$ occurences of the $A_i$ where $0 \\le C_i \\le B_i$ and $\\sum C_i = M$, then $\\text{score}(C) = \\prod_{i = 1}^{N} A_i^{C_i}$. The objective is to find the sum of scores over all possible valid combinations.\u003c/p\u003e","title":"More Generating Functions"},{"content":"Today I\u0026rsquo;ll discuss a probability problem from CodeChef.\nThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\nIf you are familiar with statistical distributions, you should immediately see the goal of this problem. Don\u0026rsquo;t worry if you are not - you should be able to follow.\nThe case $N = 1$ The only two choices for $X$ are $0$ and $1$ and the process terminates as soon as we get a $1$. This is visualised as tossing a coin and waiting until the first heads. The number of steps follows a geometric distribution with $p = \\frac{1}{2}$ (again, fret not if you don\u0026rsquo;t know what that means). It is worth mentioning how to calculate the expected value even though it is covered in the samples. Let $e$ denote the expected number of tosses until we meet our first $1$. On our first step, we either obtain a $1$ with probability $\\frac{1}{2}$ or we have to \u0026ldquo;reset\u0026rdquo; the process with probability $\\frac{1}{2}$. Thus, the equation is $e = \\frac{1}{2} \\cdot 1 + \\frac{1}{2} \\cdot (1 + e)$ which yields $e = 2$.\nUnderstanding the general case The general case is visualised as follows: do the above experiment with $N$ separate coins. What is the expected value of the maximum number of trials among them? Formally, we have $N$ iid random variables $X_1, \\cdots, X_N$ all following the geometric distribution with $p = \\frac{1}{2}$. What is the value of $E[Y]$ where $Y = \\max X_i$?\nWe know by the definition of expected value that $E[Y] = \\sum_{i \\ge 1} i\\cdot P(Y = i)$. But this can also be seen as $E[Y] = \\sum_{i \\ge 1} P(Y \\ge i)$. Why? Try writing $P(Y \\ge i)$ as $P(Y = i) + P(Y = i + 1) + \\cdots$ and check that this becomes the original definition. And so, since the $N$ variables are independent,\n$$E[Y] = \\sum_{i \\ge 1} 1 - P(Y \u0026lt; i) = \\sum_{i \\ge 1} 1 - P(X_1 \u0026lt; i) \\cdots P(X_N \u0026lt; i)$$\nThe probability $P(X_1 \u0026lt; i)$ is $1 - P(X_1 \\ge i)$. Note that $P(X_1 \\ge i)$ means that you want the first $i - 1$ tosses to appear as tails the probability of which is $\\frac{1}{2^{i - 1}}$. The same goes for $X_2$ through $X_N$ as they are identically distributed. Thus,\n$$E[Y] = \\sum_{i \\ge 1} 1 - \\left(1 - \\frac{1}{2^{i-1}}\\right)^{N}$$\nAs a sanity check, try substituting $N = 1$ and see that it matches the expected value (pun not intended).\nFor brevity, we change the indexing to 0-based and denote $p = \\frac{1}{2}$. We need to calculate $\\sum_{i\\ge 0} 1 - (1 - p^i)^N$ where $N$ is fixed.\nFinishing it off Using binomial theorem, the series is\n$$S = \\sum_{i \\ge 0}\\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} p^{ij}$$\nHere is the kicker: switch indexing.\n$$S = \\sum_{j = 1}^{N} \\sum_{i \\ge 0} \\binom{N}{j} (-1)^{N - j} p^{ij} = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\sum_{i \\ge 0} p^{ij}$$\nOf course, we know that the inner summation is merely the geometric series and so we can finish with the result (where $p$ still denotes $\\frac{1}{2}$).\n$$S = \\sum_{j = 1}^{N} \\binom{N}{j} (-1)^{N - j} \\frac{1}{1 - p^j}$$\nThe problem is thus solved in complexity $O(N \\log(10^9 + 7))$.\nThe computation of binomial coefficients modulo a large prime is a fairly common idea in competitive programming: compute in advance the arrays $\\rm factorial[0..N]$ and $\\rm inverse\\_factorial[0..N]$ where computations are carried out modulo the prime $10^9 + 7$, that is, $\\rm inverse\\_factorial[i] \\cdot factorial[i] \\equiv 1 \\pmod {10^9 + 7}$. Computing inverses/reciprocals is done using Fermat\u0026rsquo;s theorem.\n","permalink":"http://localhost:1313/posts/2022-02-05-random-or/","summary":"\u003cp\u003eToday I\u0026rsquo;ll discuss a \u003ca href=\"https://www.codechef.com/FEB221A/problems/RANDOMOR\"\u003eprobability problem from CodeChef\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe problem is as follows: we have an $N$-bit number $S$ which is initially $0$. At each step, we pick an $N$-bit number $X$ uniformly randomly and set $S := S \\mid X$ (the symbol $\\mid$ denotes bitwise-or). The process terminates when $S$ becomes $2^N - 1$ (that is, it is impossible to increase it any further because every bit is 1). What is the expected number of steps until termination?\u003c/p\u003e","title":"Random OR"},{"content":"Let\u0026rsquo;s look at this math problem from the recent AIsing Programming Contest 2020 on AtCoder.\nThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\nTo begin, it\u0026rsquo;s a good idea to cast the differences in the target expression as separate variables. Let\u0026rsquo;s rename $a_1$ as $a$ and $a_2$ as $a + a\u0026rsquo;$, so that $a\u0026rsquo; = a_2 - a_1$. It\u0026rsquo;s also a good idea to add a dummy $f \\ge 0$ to $(2)$ to the left side so that it becomes an equation. Under this renaming, things become slightly simpler. We\u0026rsquo;re now asked to evaluate the sum of \\[\\tag{1*} a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d\u0026rsquo; e\u0026rsquo;\\]for all tuples such that\\[\\tag{2*} 2(a + b + \\cdots + e) + (a\u0026rsquo; + b\u0026rsquo; + \\cdots + e\u0026rsquo;) + f = N \\]where\\[\\tag{3*} \\begin{cases}a, b, \\cdots, e, f \\ge 0 \\\\ a\u0026rsquo;, b\u0026rsquo;, c\u0026rsquo;, d\u0026rsquo;, e\u0026rsquo; \u0026gt; 0\\end{cases}\\]While the target expression $(1*)$ is simpler, we need to find out what to do about $(2*)$. Another greatly used tool in combinatorics is casting these problems in terms of generating functions and obtaining the solution by manipulating the power series.\nA few words on generating functions Consider multiplying two polynomials $f$ and $g$. Question: what exactly does the coefficient of $x^i$ denote? Described purely in words, it is the sum of product of coefficients in any two terms, one from $f$, and one from $g$, so that the sum of degrees of the terms is $i$. We can look at this for more than two polynomials: we pick one term each from every participating polynomial in the product, we find the sum of the degrees, and add the product of these coefficients to that term. We may think of the coefficients, then, as a form of weight for a term.\nThe technique we\u0026rsquo;re about to employ takes advantage of precisely this. We multiply many series, where each individual series corresponds to a variable. The exponents denote possible values for the variable, and a coefficient intuitively describes the weight in that term. Then the coefficients of the product are the sum of products of these weights.\nSolution We need to derive a generating function from $(2*)$. We\u0026rsquo;re adding up to $N$ using $11$ non-negative integers, where the first five of them are even (this is because of the coefficient $2$), and the next five of them are strictly positive. We also need to weigh the series that correspond to $a\u0026rsquo;, b\u0026rsquo;, \\cdots, e\u0026rsquo;$ so that we get the sum of $a\u0026rsquo;b\u0026rsquo;c\u0026rsquo;d\u0026rsquo;e\u0026rsquo;$ in the resulting product. This can be done by making the coefficient equal to the exponent (so that if $x^i$ is picked, it contributes $i$ to the product). So we obtain the following representation:\\[F(x) = (1 + x^2 + x^4 + \\cdots)^5 (1x + 2x^2 + 3x^3 + \\cdots )^5 (1 + x + x^2 + \\cdots)\\]and we need to find the coefficient of $x^N$ in $F(x)$ to obtain the answer. The first boss move in moving to the solution is noticing\\[x + 2x^2 + 3x^3 + \\cdots = x(1 + x + x^2 + \\cdots)^2\\]so that\\[F(x) = x^5 (1 + x^2 + x^4 + \\cdots)^5(1 + x + x^2 + \\cdots)^{11}\\]We should also remove the stupid $x^5$ because it\u0026rsquo;s of no use to us, and we can calculate the coefficient of $x^{N-5}$ in\\[F_2(x) = (1 + x^2 + x^4 + \\cdots)^5(1+x+x^2 + \\cdots)^{11}\\]We\u0026rsquo;ve hit the crux of the problem: what do we do with this? Life would have been much simpler if we had only a single type of exponentiated. Why? Because we have a closed form\\[\\tag{*} (1 + x + x^2 + \\cdots)^n = \\sum_{k = 0}^{\\infty} \\binom{n + k - 1}{k - 1} x^k\\]This is stars-and-bars in terms of generating functions.\nWithout further ado, here\u0026rsquo;s the big trick:\\[1 + x + x^2 + \\cdots = (1 + x)(1 + x^2 + x^4 + \\cdots)\\]And so\\[F_2(x) = (1+x)^{11} (1+x^2+x^4+\\cdots)^{16}\\]The first part $(1 + x)^{11}$ can be expanded using the binomial theorem, and the second part can be expanded using $(*)$. To evaluate the coefficient of $x^{N-5}$, we loop on the term from the binomial expansion, (say, the $x^i$ term) and multiply its coefficient by the coefficient of $x^{N-5-i}$ in the in the expansion of $(1 + x^2 + x^4 + \\cdots)^{16}$. And we\u0026rsquo;re done!\nA tiny implementation detail: To compute a binomial coefficient $\\binom{p}{q}$ with large $p$ and small $q$, it\u0026rsquo;s better to use the following:\\[\\binom{p}{q} = \\frac{p(p-1)\\cdots(p-q+1)}{q!}\\]Most problems involve precomputing factorials and their inverses, but this is not one of them.\n","permalink":"http://localhost:1313/posts/2020-08-03-generating-functions/","summary":"\u003cp\u003eLet\u0026rsquo;s look at this math problem from the recent \u003ca href=\"https://atcoder.jp/contests/aising2020/tasks/aising2020_f\"\u003eAIsing Programming Contest 2020 on AtCoder.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is to compute the sum of \\[\\tag{1}(a_2 - a_1)(b_2 - b_1)(c_2 - c_1)(d_2 - d_1)(e_2 - e_1)\\] for all tuples such that \\[\\tag{2} a_1 + a_2 + b_1 + b_2 + \\cdots + e_1 + e_2 \\le N\\] where $$\\tag{3} 0 \\le a_1 \u0026lt; a_2, ~ 0 \\le b_1 \u0026lt; b_2, \\cdots,~ 0 \\le e_1 \u0026lt; e_2$$The constraint $N \\le 10^9$ makes it worse.\u003c/p\u003e","title":"Generating Functions"}]